/*!
Import
Copyright 2018 CCRi.
*/
angular.module("stealth.import",[]).namespace(),angular.module("stealth.import.files",[]).namespace();var stImport;!function(a){var b;!function(a){function b(a,b,l,m,n,o,p,q){return d=a,e=b,f=l,g=m,h=n,i=o,j=p,k=q,new c}var c=function(){function a(){this.PARSERS=[{type:"GeoJSON",parserFn:this.processGeoJSONFile.bind(this),fileExtensions:["json","geojson"]},{type:"GPX",parserFn:this.processGPXFile.bind(this),fileExtensions:["gpx"]},{type:"IGC",parserFn:this.processIGCFile.bind(this),fileExtensions:["igc"]},{type:"TopoJSON",parserFn:this.processTopoJSONFile.bind(this),fileExtensions:["json","topojson"]},{type:"KML",parserFn:this.processKMLFile.bind(this),fileExtensions:["kml"]},{type:"KMZ",parserFn:this.processKMZFile.bind(this),fileExtensions:["kmz"]},{type:"shapefile",parserFn:this.processShapefileFile.bind(this),fileExtensions:["zip"]}],this.processingCount=0}return a.prototype.showProcessingToastr=function(){this.processingCount++,this.processingToastr||(this.processingToastr=h.info("Processing files...",null,{toastClass:"waitingToast",iconClass:"waitingToastIcon",timeOut:0,extendedTimeOut:0}))},a.prototype.hideProcessingToastr=function(){var a=this;this.processingCount>0&&this.processingCount--,0===this.processingCount&&this.processingToastr&&this.processingToastr.open.promise.then(function(){e(function(){h.clear(a.processingToastr),a.processingToastr=null},1e3)})},a.prototype.importFile=function(a){var b=this;return d(function(c,d){var e=g.addPlaceholderLayer(a.name);b.showProcessingToastr();var f=b.processFile(a);f.finally(function(){b.hideProcessingToastr()}),f.then(function(f){if(f.features&&f.features.length>0){var g=b.importFeatures(f.features,f.filename,f.type,e);c({features:f.features,type:f.type,filename:f.filename,extension:f.extension,layer:g})}else h.error("No geographic data found",a.name),d("empty")}).catch(function(b){e.processing=!1,e.error=!0,"empty"===b?h.error("No geographic data found",a.name):h.error("Unable to process file",a.name),d("error")})})},a.prototype.importFeatures=function(a,b,c,d){c=c||"";var e=new j({id:ccriUtils.uuid.generate(),name:b,features:a,queryable:!1,iconClass:"fa fa-fw fa-lg fa-file-o"});return _.contains(["geojson","zip","json"],c.toLowerCase())||(e.styleDirectiveScope.sizeChanged=null,e.styleDirectiveScope.fillColorChanged=null),d?g.completeLayer(e,d):(i.addLayer(e),g.addLayer(e)),h.info("Data added to map",b),"kmz"==c&&h.warning("Only core KML geometries can be displayed","KMZ files not fully supported"),e},a.prototype.processFile=function(a){var b=this;return d(function(c,e){var f,g,h=a.name,i=h.split(".");g=i.length<2?null:i[i.length-1].toLowerCase();var j,k=b.PARSERS.slice(),l=d(function(b){var c=d.resolve();g&&_.forEach(k,function(b,e){c=c.then(function(){return j&&j.length?d.resolve():_.get(b,"fileExtensions",[]).indexOf(g)===-1?d.resolve():(k.splice(e,1),d.when(b.parserFn(a)).then(function(a){f=b.type,a&&a.length&&(j=a)}).catch(function(){return d.resolve()}))})}),c.then(b)}),m=l.then(function(){return j&&j.length?d.resolve():d(function(b){var c=d.resolve();_.forEach(k,function(b,e){c=c.then(function(){return j&&j.length?d.resolve():(k.splice(e,1),d.when(b.parserFn(a)).then(function(a){a&&a.length&&(f=b.type,j=a)}).catch(function(){return d.resolve()}))})}),c.then(b)})});m.then(function(){f?j&&j.length?c({features:j,type:f,filename:h,extension:g}):e("empty"):e()})})},a.prototype.processShapefileFile=function(a){return d(function(b){var c=new FileReader;c.onload=function(){f.parseShapefile(c.result).then(function(a){if(a&&a.length){var c=[];_.forEach(a,function(a){_.forEach(a.features,function(a){try{c.push(Geo.parser.geoJsonToFeature(a))}catch(a){}})}),b(c)}else b([])}).catch(function(){b([])})},c.onerror=function(){b([])},c.readAsArrayBuffer(a)})},a.prototype.processGPXFile=function(a){return d(function(b,c){Geo.fileParser.parseGPXFile(a).then(b,c)})},a.prototype.processGeoJSONFile=function(a){return d(function(b,c){Geo.fileParser.parseGeoJSONFile(a).then(b,c)})},a.prototype.processIGCFile=function(a){return d(function(b,c){Geo.fileParser.parseIGCFile(a).then(b,c)})},a.prototype.processKMLFile=function(a){return d(function(b,c){Geo.fileParser.parseKMLFile(a).then(b,c)})},a.prototype.processKMZFile=function(a){var b=this;return d(function(c){JSZip.loadAsync(a).then(function(a){_.forEach(a.files,function(d,e){if(e.indexOf(".kml")!==-1)return a.file(e).async("string").then(function(a){var e=new File([a],d.name,{type:"text/plain"});b.processKMLFile(e).then(function(a){c(a)})}),!1})}).catch(function(){c([])})})},a.prototype.processTopoJSONFile=function(a){return d(function(b,c){Geo.fileParser.parseTopoJSONFile(a).then(b,c)})},a}();a.Importer=c;var d,e,f,g,h,i,j,k;b.$inject=["$q","$timeout","ccri.geo.fileParser.shapefileParser","ImportCache","toastr","ol3Map","stealth.core.geo.ol3.layers.FeatureLayer","stylepicker"],a.factory=b}(b=a.Files||(a.Files={}))}(stImport||(stImport={})),angular.module("stealth.import.files",["ccri.geo.fileParser","stealth.core.utils","stealth.core.geo.import.category","stealth.core.geo.ol3.map","stealth.core.geo.ol3.layers","toastr"]).factory("importer",stImport.Files.factory),angular.module("stealth.import.wizard",["stealth.import.templates"]).namespace(),angular.module("stealth.import.wizard",["stealth.core.startmenu"]).run(["startMenuManager","stealth.import.wizard.Constants","stealth.import.wizard.WizFactory",function(a,b,c){function d(){c.launchWizard()}a.addButton(b.name,b.icon,d)}]);var stImport;!function(a){var b;!function(a){function b(a,b,c,d){return{launchWizard:function(){function e(a){_.each(a,function(a){a.features&&d.importFeatures(a.features,a.filename,a.extension)})}c.run({steps:[b({})],displaySettings:{wizardTitle:a.name,wizardClass:"wizard-dark",mainIconClass:a.icon,finishIconClass:"fa-check text-success",endActionText:"Import"}}).then(function(a){e(a.featureHoldings)})}}}b.$inject=["stealth.import.wizard.Constants","stealth.import.wizard.step","stealth.wizard.WizardRunner","stealth.import.files.importer"],a.wizFactory=b}(b=a.Wizard||(a.Wizard={}))}(stImport||(stImport={})),angular.module("stealth.import.wizard",["stealth.import.files"]).factory("WizFactory",stImport.Wizard.wizFactory),angular.module("stealth.import.wizard",[]).constant("Constants",{name:"File Import to Map",icon:"fa-map-o"});var stImport;!function(a){var b;!function(a){var b;!function(a){function b(a){return function(a,b){return a.featureHoldings=a.featureHoldings||[],new e("Select Files to Import",new f({tag:"stealth-import-wizard-step-view",attrs:null,scope:b,isolateScope:!1}),null,!0,null,null,!1)}}function c(a,c,g){return d=a,e=c,f=g,b}a.service=b;var d,e,f;c.$inject=["$rootScope","stealth.wizard.Step","ccri.angular-utils.WidgetDef"],a.factory=c}(b=a.Step||(a.Step={}))}(b=a.Wizard||(a.Wizard={}))}(stImport||(stImport={})),angular.module("stealth.import.wizard",["ccri.angular-utils","stealth.wizard"]).factory("step",stImport.Wizard.Step.factory);var stImport;!function(a){var b;!function(a){function b(a,b){function c(b){var c=b.target,g=[];_.forEach(c.files,function(b){var c={name:b.name,features:[],extension:null,processing:!0,error:!1};a.fileHoldings.push(c);var d=e.processFile(b).then(function(a){c.error=!1,c.name=a.filename,c.features=a.features,c.extension=a.extension}).catch(function(){c.error=!0}).finally(function(){c.processing=!1});g.push(d)}),d.all(g).then(function(){f(),c.value=""})}function f(){h.featureHoldings.length=0,_.forEach(a.fileHoldings,function(a){!a.error&&a.features.length&&h.featureHoldings.push({features:a.features,filename:a.name,extension:a.extension})})}var g=a.$on("$destroy",function(){g(),g=null,b.off("change",c),a=b=null}),h=a.selections;a.fileHoldings=[],b.on("change",c),a.formValid=function(b){if(!b)return a.fileHoldings&&0!==a.fileHoldings.length?_.any(a.fileHoldings,"processing")?null:!_.every(a.fileHoldings,"error")||null:null},a.removeFileFromList=function(b,c){a.fileHoldings.splice(c,1),f()}}function c(a,c){return d=a,e=c,{restrict:"E",scope:!1,templateUrl:"stealth.import/import.wizard/importFilesStepView.tpl.html",link:b}}a.stepViewDirectiveLink=b;var d,e;c.$inject=["$q","stealth.import.files.importer"],a.stepViewDirectiveFactory=c}(b=a.Wizard||(a.Wizard={}))}(stImport||(stImport={})),angular.module("stealth.import.wizard",["stealth.import.files"]).directive("stepView",stImport.Wizard.stepViewDirectiveFactory),angular.module("stealth.import.templates",[]).run(["$templateCache",function(a){a.put("stealth.import/import.wizard/importFilesStepView.tpl.html",'<ng-form name="wizardForm">\n    <div class="note">Supported file types: GeoJSON, KML, KMZ, Shapefile, IGC, GPX, TopoJSON</div>\n    <div class="fileButtonHeight">\n        <div class="fileContainer text-btn">\n                <input type="file" id="fileupload" name="fileupload" multiple\n\t\taccept=".zip,.json,.topojson,.geojson,.kml,.kmz,.igc,.gpx" class="hidden"/>\n\t\t<label type="file" for="fileupload">Choose a File</label>\n        </div>\n        <!-- hidden input to disable the Next button if nothing has been drawn -->\n        <input type="hidden" name="formValid" ng-model="formValid" ng-model-options="{getterSetter:true}" required>\n    </div>\n    <div class="listItems">\n        <div ng-repeat="file in fileHoldings">\n            <i class="fa fa-refresh fa-spin" ng-class="{\'ng-hide\': !file.processing}"></i>\n            <i class="fa fa-warning text-danger" ng-class="{\'ng-hide\': file.processing || !file.error}"></i>\n            <i class="fa fa-check text-success" ng-class="{\'ng-hide\': file.processing || file.error}"></i>\n            <span>{{file.name}}</span>\n            <i class="fa fa-close text-danger-hover clickable"\n               ng-click="removeFileFromList(file, $index)"\n               uib-tooltip="Don\'t Add to Map"\n               tooltip-placement="right"\n               tooltip-popup-delay="500"></i>\n            <div ng-if=file.extension===\'kmz\' style="color:#F89406; font-size:9px; padding-left:18px;">Only core KML geometries can be displayed.</div>   \n        </div>\n    </div>\n</ng-form>\n')}]);