/*!
Area Definition
Copyright 2018 CCRi.
*/
var __extends=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();angular.module("ccri.area-definition",["stealth.core.geo.ol3.interaction","stealth.core.geo.ol3.overlays","stealth.core.wizard","ccri.area-definition.templates"]).namespace();var CreateFeatures;!function(a){function b(a){if(a instanceof ol.geom.GeometryCollection){var c=[];return a.getGeometries().forEach(function(a){c=c.concat(b(a))}),c}return[a]}function c(a,b,c,d){if(b===c)return a;var e,f;switch(d&&(f=d.getMetersPerUnit()),b){case"deg":case"degrees":if(!d)throw'must supply projection to use "degree" units';e=a*f;break;case"km":case"kilometers":e=1e3*a;break;case"m":case"meters":e=a;break;case"nm":case"nautical miles":e=1852*a;break;case"mi":case"miles":e=1609.344*a;break;default:throw'unsupported "from" units'}switch(c){case"deg":case"degrees":if(!d)throw'must supply projection to use "degree" units';return e/f;case"km":case"kilometers":return e/1e3;case"m":case"meters":return e;case"nm":case"nautical miles":return e/1852;case"mi":case"miles":return e/1609.344}throw'unsupported "to" units'}a.flattenGeometryCollection=b,a.convertUnits=c}(CreateFeatures||(CreateFeatures={}));var CreateFeatures;!function(a){var b=function(a){function b(){return a.call(this)||this}return __extends(b,a),b.prototype.handleKeyPress=function(a){return!1},b.prototype.handleMapClick=function(a){return!1},b.changeProperties=function(a,b){var c=!1;for(var d in a)a.hasOwnProperty(d)&&d in b&&(_.isEqual(a[d],b[d])||(_.isObject(a[d])&&_.isObject(b[d])?_.assign(a,b):a[d]=b[d],c=!0));return c},b.prototype.setGeodesic=function(a){this.geodesic=a},b.prototype.isGeodesic=function(){return this.geodesic},b}(ol.Observable);a.FeatureGeneratorTool=b}(CreateFeatures||(CreateFeatures={}));var CreateFeatures;!function(a){function b(a,b,c,e,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M){return f=a,g=b,h=c,i=e,j=y,k=z,l=A,m=B,n=C,o=D,p=E,q=F,r=G,s=H,t=I,u=J,v=K,w=L,x=M,d}function c(){return new e}var d=function(b){function c(a){var c=b.call(this)||this;return c.map=j.getMap(),c.knownTools=["radiusCircle","polygon","mapPoint","line","bufferFeature","mapView","coordRect","textVector","polygonSelector","wholeEarth"],c.acceptedGeometries=["Polygon","MultiPolygon","Circle","MultiLineString","LineString","Point"],c.addLayerToMap=!1,c.activeTool=null,c.activeToolName=null,c.geodesic=!1,c.handleMapClicks=!0,c.orderCounter=0,c.ORDER_PROPERTY="createdOrder",c.activeTool_lastHadFeature=!1,c.on("destroy",c.destroy,c),c.features=new ol.Collection([]),c.supportedTools=a.supportedTools,c.disableMultiple=a.disableMultiple||!1,c.addLayerToMap=a.addLayerToMap!==!1,c.geodesic=a.geodesic!==!1,c.init(),c}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),j.removeLayerOverlay(this.compositeLayer),this.map.removeInteraction(this.selectInteraction),this.map=null,_.pull(l.list,this),this.activeTool&&(this.deregActiveToolListeners(),this.activeTool.destroy()),this.activeTool=null,this.wrapHelper&&this.wrapHelper.destroy(),this.wrapHelper=null,this.compositeSource=null,this.compositeLayer=null,this.selectedFeatures=null,this.selectInteraction=null,this.features.clear(),this.features=null,this.knownTools=this.acceptedGeometries=this.supportedTools=null},c.prototype.init=function(){var a=this;n.setState("select",{}),this.compositeSource=new ol.source.Vector({features:this.features,wrapX:!0}),this.compositeLayer=new ol.layer.Vector({renderOrder:function(b,c){var d=b.get(a.ORDER_PROPERTY),e=c.get(a.ORDER_PROPERTY);return d<e?-1:d>e?1:0},source:this.compositeSource,style:h.composite}),this.compositeLayer.setProperties({name:"FeatureCreator"}),this.selectedFeatures=new ol.Collection([]),this.selectInteraction=new ol.interaction.Select({condition:ol.events.condition.never,toggleCondition:ol.events.condition.never,multi:!0,layers:[],style:h.active,features:this.selectedFeatures}),this.wrapHelper=new m,this.wrapHelper.watchCollection(this.features),this.addLayerToMap&&j.addLayerOverlay(this.compositeLayer),this.map.addInteraction(this.selectInteraction),l.list.unshift(this)},c.prototype.handleMapClick=function(a){var b=this;if(!this.handleMapClicks)return!1;var c=[];this.map.forEachFeatureAtPixel(a.pixel,function(a){c.push(a)},{layerFilter:function(a){return a===b.compositeLayer}});var d;if(c.length)var d=_.max(c,function(a){return a.get(b.ORDER_PROPERTY)});return this.finishActiveTool_().then(function(){if(d)b.featureSelected(d);else if("edit"===n.getState()){var a=n.getParameters();b.startTool_(a.toolName),n.setState("create",{toolName:a.toolName})}}),!0},c.prototype.handleKeyPress=function(a){var b=this;if(!this.handleMapClicks)return!1;var c=n.getState(),d=n.getParameters(),e=!1;switch(a.keyCode){case 46:"create"===c&&(e=!0,this.activeTool.hasFeature()&&this.deleteActiveFeature_().then(function(){b.dispatchEvent({type:"featureschanged"})})),"edit"===c&&(e=!0,this.finishActiveTool_(!0).then(function(){n.setState("select",{}),b.dispatchEvent({type:"featureschanged"})}));break;case 13:var f=this.activeTool?this.activeTool.getProperties():{textAreaSelected:!1};f.textAreaSelected||"create"!==c&&"edit"!==c||(e=!0,this.finishActiveTool_(),n.setState("select",{}));break;case 27:"create"!==c&&"edit"!==c||(e=!0,this.activeTool&&!this.activeTool.hasFeature()?(this.finishActiveTool_(!0),n.setState("select",{})):this.deleteActiveFeature_().then(function(){"edit"===c&&(b.addFeatures_(d.features),n.setState("create",{toolName:d.toolName}),b.dispatchEvent({type:"featurescreated",features:d.features})),b.dispatchEvent({type:"featureschanged"})}))}return e},c.prototype.startTool=function(a,b){var c=this,d=g.when();return this.activeTool&&(d=this.finishActiveTool_()),d=d.then(function(){return c.startTool_(a,b)}),d.then(function(){b&&b.length?n.setState("edit",{toolName:a,features:b}):n.setState("create",{toolName:a})}),d},c.prototype.startTool_=function(a,b){var c=this;if(!~this.knownTools.indexOf(a))return g.reject();if(this.activeTool)return g.reject("Must close active tool");switch(a){case"radiusCircle":this.activeTool=new o;break;case"polygon":this.activeTool=new p;break;case"mapPoint":this.activeTool=new q;break;case"bufferFeature":this.activeTool=new r;break;case"mapView":this.activeTool=new s;break;case"coordRect":this.activeTool=new t;break;case"textVector":this.activeTool=new u;break;case"polygonSelector":this.activeTool=new v;break;case"wholeEarth":this.activeTool=new w;break;case"line":this.activeTool=new x}return this.activeTool.setGeodesic(this.geodesic),this.activeToolName=a,this.activeTool?(l.list.unshift(this.activeTool),this.activeTool.on("autofinish",this.onAutoFinish,this),this.activeTool.on("featurescreated",this.onFeaturesCreated,this),this.activeTool.on("propertieschanged",this.onPropertiesChanged,this),this.activeTool.on("drawstart",this.onDrawStart,this),this.activeTool.activate(b).then(function(){return c.dispatchEvent({type:"toolstarted",toolName:a,tool:c.activeTool}),c.activeTool})):g.reject("Not implemented")},c.prototype.onAutoFinish=function(){this.finishActiveTool_()},c.prototype.onFeaturesCreated=function(a){this.disableMultiple||(this.addFeatures_(a.features),this.dispatchEvent({type:"featurescreated",features:a.features}),this.dispatchEvent({type:"featureschanged"}))},c.prototype.onPropertiesChanged=function(){this.activeTool.hasFeature()?(this.activeTool_lastHadFeature=!0,this.dispatchEvent({type:"featureschanged"})):this.activeTool_lastHadFeature&&(this.activeTool_lastHadFeature=!1,this.dispatchEvent({type:"featureschanged"}))},c.prototype.onDrawStart=function(){n.getState();this.disableMultiple&&this.features.clear()},c.prototype.deregActiveToolListeners=function(){this.activeTool.un("autofinish",this.onAutoFinish,this),this.activeTool.un("featurescreated",this.onFeaturesCreated,this),this.activeTool.un("propertieschanged",this.onPropertiesChanged,this),this.activeTool.un("drawstart",this.onDrawStart,this)},c.prototype.finishActiveTool=function(a){if(void 0===a&&(a=!1),!this.activeTool)return g.when();var b=this.finishActiveTool_(a);return b.then(function(){n.setState("select",{})}),b},c.prototype.finishActiveTool_=function(a){var b=this;return void 0===a&&(a=!1),this.activeTool?(this.deregActiveToolListeners(),g.when(this.activeTool.finish()).then(function(c){_.pull(l.list,b.activeTool),b.activeTool=null,b.activeToolName=null,b.dispatchEvent({type:"toolfinished"}),!a&&c.length>0&&(b.addFeatures_(c),b.dispatchEvent({type:"featurescreated",features:c}),b.dispatchEvent({type:"featureschanged"}))})):g.when()},c.prototype.deleteActiveFeature=function(){var a=this,b=this.deleteActiveFeature_();return b.then(function(){a.dispatchEvent({type:"featureschanged"})}),b},c.prototype.deleteActiveFeature_=function(){return this.activeTool?this.activeTool.clear():g.when()},c.prototype.clear=function(a){var b=this;void 0===a&&(a=!1),this.features.clear(),this.selectedFeatures.clear();var c=g.when();return a&&(c=this.deleteActiveFeature_()),c.then(function(){b.dispatchEvent({type:"featureschanged"})}),c},c.prototype.featureSelected=function(b){var c=this,d=b.get(this.ORDER_PROPERTY),e=b.getProperties().toolEditor;if(e||(e=a.GeneratedFeature.guessEditor(b.getGeometry(),b.getProperties())),~this.supportedTools.indexOf(e))return this.finishActiveTool_().then(function(){var a,f=b.clone(),h=c.wrapHelper.isASplit(b);return h?(a=c.wrapHelper.getSplitParts(b),a.forEach(function(a){c.features.remove(a)})):c.features.remove(b),c.startTool_(e,[f]).catch(function(){return c.finishActiveTool_().finally(g.reject)}).catch(function(){return"polygon"==e?g.reject():c.startTool_("polygon",[f]).catch(function(){return c.finishActiveTool_().finally(g.reject)})}).catch(function(){return h?c.features.extend(a):c.features.push(f),g.reject()}).then(function(){n.setState("edit",{toolName:e,features:h?a:[b],order:d})})})},c.prototype.addFeatures=function(a){this.addFeatures_(a),this.dispatchEvent({type:"featurescreated",features:a}),this.dispatchEvent({type:"featureschanged"})},c.prototype.addFeatures_=function(a){var b=this;if(a&&0!==a.length){if(this.disableMultiple&&(this.features.clear(),a.length>1||!(a[0].getGeometry()instanceof ol.geom.Polygon)))return void this.finishActiveTool_().then(function(){b.startTool_("polygonSelector",a)});_.forEach(a,function(a){a.get(b.ORDER_PROPERTY)||a.set(b.ORDER_PROPERTY,n.getLastParameters().order||++b.orderCounter)}),this.features.extend(_.filter(a,function(a){return _.includes(b.acceptedGeometries,a.getGeometry().getType())}))}},c.prototype.hasFeatures=function(){return this.features.getLength()>0||this.activeTool&&this.activeTool.hasFeature()},c.prototype.hasActiveFeature=function(){return this.activeTool&&this.activeTool.hasFeature()},c.prototype.getActiveFeatures=function(){var a=this;return this.activeTool?this.activeTool.getActiveFeatures().then(function(b){b.forEach(function(b){a.wrapHelper.wrap(b)});var c=[];return b.forEach(function(b){var d=a.wrapHelper.split(b);d?c.push.apply(c,d):c.push(b)}),c}):g.when([])},c.prototype.getFeatures=function(a){void 0===a&&(a=!0);var b=this.features.getArray();return this.activeTool||(a=!1),a?this.getActiveFeatures().then(function(a){return b=b.concat(a)}):g.when(b)},c.prototype.getCompositeLayer=function(){return this.compositeLayer},c.prototype.addSelectedFeatures=function(a){this.removeSelectedFeatures(a),this.selectedFeatures.extend(a)},c.prototype.removeSelectedFeatures=function(a){var b=this;a.forEach(function(a){b.selectedFeatures.remove(a)})},c.prototype.finish=function(){var a=this,b=this.finishActiveTool_().then(function(){var b=_.clone(a.features.getArray());return a.features.clear(),b});return b.finally(function(){a.dispatchEvent({type:"destroy"})}),b},c.prototype.getActiveToolName=function(){return this.activeToolName},c.prototype.getActiveTool=function(){return this.activeTool},c}(ol.Observable);a.FeatureCreator=d;var e=function(){function a(){this.currentState="select",this.currentParameters={},this.lastState=null,this.lastParameters=null}return a.prototype.setState=function(a,b){this.lastState=this.currentState,this.lastParameters=_.clone(this.currentParameters),this.currentState=a,this.currentParameters=b},a.prototype.getState=function(){return this.currentState},a.prototype.getParameters=function(){return this.currentParameters},a.prototype.getLastState=function(){return this.lastState},a.prototype.getLastParameters=function(){return this.lastParameters},a}();a.FeatureCreatorState=e;var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x;b.$inject=["$log","$q","ccri.area-definition.colors","stealth.core.geo.ol3.overlays.Vector","ol3Map","ol3Styles","ccri.area-definition.EventDelegator","ccri.area-definition.WrapHelper","ccri.area-definition.FeatureCreatorState","ccri.area-definition.RadiusCircleTool","ccri.area-definition.PolygonTool","ccri.area-definition.MapPointTool","ccri.area-definition.BufferFeatureTool","ccri.area-definition.MapViewTool","ccri.area-definition.CoordRectTool","ccri.area-definition.TextVectorTool","ccri.area-definition.PolygonSelectorTool","ccri.area-definition.WholeEarthTool","ccri.area-definition.LineTool"],a.FeatureCreatorService=b,a.FeatureCreatorStateService=c}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("FeatureCreator",CreateFeatures.FeatureCreatorService).factory("FeatureCreatorState",CreateFeatures.FeatureCreatorStateService);var CreateFeatures;!function(a){function b(){return c}var c=function(b){function c(c,d,e){var f=b.call(this,e)||this,g={toolEditor:c,toolProperties:d};return f.setProperties(g),d.text&&f.setStyle(a.ColorLibrary.text(d.text)),f}return __extends(c,b),c.prototype.getProperties=function(){return b.prototype.getProperties.call(this)},c.prototype.clone=function(){return b.prototype.clone.call(this)},c.fromFeature=function(b,d,e){var f=[].concat(c.breakDownFeature(b)),g=b.getProperties(),h=c.guessEditor(b.getGeometry(),g);return f.forEach(function(b){if(b.setProperties({toolEditor:d||g.toolEditor||h,toolProperties:_.assign({},g.toolProperties,e)}),g.toolProperties.text&&b.setStyle(a.ColorLibrary.text(g.toolProperties.text)),g.toolProperties.arrow){var c=a.Line.LineTool.getStartAndEndPoints(b,g.toolProperties.geodesic);a.ColorLibrary.addArrow(c,b,!1)}}),f},c.guessEditor=function(a,b){return a instanceof ol.geom.Polygon||a instanceof ol.geom.MultiPolygon||a instanceof ol.geom.Circle?"polygon":a instanceof ol.geom.LineString||a instanceof ol.geom.MultiLineString?"line":a instanceof ol.geom.Point&&b.text?"textVector":a instanceof ol.geom.Point?"mapPoint":void 0},c.breakDownFeature=function(b){var c=b.getGeometry(),d=a.flattenGeometryCollection(c),e=d.map(function(a){var c=b.clone();return c.setGeometry(a),c});return e},c}(ol.Feature);a.GeneratedFeature=c,b.$inject=[],a.GeneratedFeatureFactory=b}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").factory("GeneratedFeature",CreateFeatures.GeneratedFeatureFactory);var CreateFeatures;!function(a){var b=function(){function a(){}return a.outline=function(a){var b={stroke:new ol.style.Stroke({color:this.color_white,width:1}),fill:new ol.style.Fill({color:this.color_transparent})},c=a.getStroke();c&&c.getLineDash()&&b.stroke.setLineDash(c.getLineDash());var d,e,f;return(d=a.getStroke())&&(f=d.getWidth())&&b.stroke.setWidth(f+2),(e=a.getFill())&&(b.fill.setColor(e.getColor()),e.setColor(this.color_transparent)),[new ol.style.Style(b),a]},a.getArrowStyle=function(b,c){var d=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_lightgreen_hex,width:2}),fill:new ol.style.Fill({color:a.color_white_half_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_lightgreen_hex})})}));return d.push(new ol.style.Style({geometry:new ol.geom.Point(b),text:new ol.style.Text({text:"",font:"normal 35px FontAwesome",rotation:c,fill:new ol.style.Fill({color:a.color_lightgreen_hex}),stroke:new ol.style.Stroke({color:a.color_white,width:2})})})),d},a.getActiveArrowStyle=function(b,c){var d=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:2}),fill:new ol.style.Fill({color:a.color_white_half_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_red})})}));return d.push(new ol.style.Style({geometry:new ol.geom.Point(b),text:new ol.style.Text({text:"",font:"normal 35px FontAwesome",rotation:c,fill:new ol.style.Fill({color:a.color_red}),stroke:new ol.style.Stroke({color:a.color_white,width:2})})})),d},a.addArrow=function(b,c,d){if(b){var e=b.end[0]-b.start[0],f=b.end[1]-b.start[1],g=-Math.atan2(f,e),h=d?a.getActiveArrowStyle:a.getArrowStyle;c.setStyle(h(b.end,g))}},a.text=function(b){return new ol.style.Style({text:new ol.style.Text({textAlign:"start",textBaseline:"top",font:"16px arial",text:b,fill:new ol.style.Fill({color:a.color_white}),stroke:new ol.style.Stroke({color:"black",width:3})})})},a.color_transparent="rgba(0,0,0,0)",a.color_white="rgba(255,255,255,1)",a.color_white_half_transparent="rgba(255,255,255,0.5)",a.color_lightgreen="rgba(0,255,191,1)",a.color_lightgreen_hex="#00ffbf",a.color_red="rgba(255,82,64,1)",a.color_red_semi_transparent="rgba(255,82,64,0.4)",a.color_red_hex="#ff5240",a.color_gray_semi_transparent="rgba(228,228,228,0.4)",a.composite=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_lightgreen,width:2}),fill:new ol.style.Fill({color:a.color_white_half_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_lightgreen_hex})})})),a.active=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:2}),fill:new ol.style.Fill({color:a.color_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_red_hex})})})),a.guides=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:2,lineDash:[.1,5]}),fill:new ol.style.Fill({color:a.color_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_red_hex})})})),a.draw=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:2}),fill:new ol.style.Fill({color:a.color_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_red_hex})})})).concat(new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:a.color_red}),stroke:new ol.style.Stroke({color:a.color_white,width:1.5})}),zIndex:1/0})),a.blank=new ol.style.Style({}),a.features_selectable=new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:1}),fill:new ol.style.Fill({color:a.color_gray_semi_transparent}),image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:a.color_red_hex})})}),a.features_selected=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:2}),fill:new ol.style.Fill({color:a.color_red_semi_transparent}),image:new ol.style.Circle({radius:4,fill:new ol.style.Fill({color:a.color_red_hex}),stroke:new ol.style.Stroke({color:a.color_white,width:1})})})),a.features_buffered=a.outline(new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:1.5}),fill:new ol.style.Fill({color:a.color_red_semi_transparent})})),a.features_buffertarget=new ol.style.Style({stroke:new ol.style.Stroke({color:a.color_red,width:2}),fill:new ol.style.Fill({color:a.color_red_semi_transparent}),image:new ol.style.Circle({radius:2,fill:new ol.style.Fill({color:a.color_red_hex})})}),a}();a.ColorLibrary=b}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").constant("colors",CreateFeatures.ColorLibrary);var CreateFeatures;!function(a){function b(a){function b(){e(),e=null,f=null,a.featureCreator=null,a=null}function c(){return f.hasFeatures()}function d(){f.clear(!0)}var e=a.$on("$destroy",b),f=a.featureCreator;a.hasFeatures=c,a.erase=d}function c(){return{replace:!0,restrict:"E",scope:{featureCreator:"=",iconClass:"@?"},templateUrl:"ccri.area-definition/controls/eraseButton.tpl.html",controller:"ccri.area-definition.EraseButtonCtrl",link:function(a){a.iconClass=a.iconClass||"fa-eraser"}}}b.$inject=["$scope"],a.EraseButtonController=b,c.$inject=[],a.EraseButtonDirective=c}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",[]).controller("EraseButtonCtrl",CreateFeatures.EraseButtonController).directive("eraseButton",CreateFeatures.EraseButtonDirective);var CreateFeatures;!function(a){function b(a,b,c){function d(){return i.hasFeatures()}function e(b){var c=i.getFeatures();c.then(function(c){if(c.length){var d,e;switch(b){case"json":e="application/json",d=h.writeFeatures(c);break;default:return void a.debug("format not supported: "+b)}var f=new Blob([d],{type:e});saveAs(f,"area."+b)}})}function f(){g(),g=null,h=null,i=null,b.featureCreator=null,b=null}var g=b.$on("$destroy",f),h=new c,i=b.featureCreator;b.hasFeatures=d,b.save=e}function c(){return{replace:!0,restrict:"E",scope:{featureCreator:"=",iconClass:"@?",toggleClass:"@?",menuClass:"@?"},templateUrl:"ccri.area-definition/controls/saveButton.tpl.html",controller:"ccri.area-definition.SaveButtonCtrl",link:function(a){a.iconClass=a.iconClass||"fa-save",a.toggleClass=a.toggleClass||"btn btn-default dropdown-toggle",a.menuClass=a.menuClass||"dropdown-menu"}}}b.$inject=["$log","$scope","stealth.core.geo.ol3.format.GeoJson"],a.SaveButtonController=b,c.$inject=[],a.SaveButtonDirective=c}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").controller("SaveButtonCtrl",CreateFeatures.SaveButtonController).directive("saveButton",CreateFeatures.SaveButtonDirective);var CreateFeatures;!function(a){function b(a){function b(){e(),e=null,f=null,a.featureCreator=a.disableWhenEmpty=null,a=null}function c(){return f.hasFeatures()}function d(){f.finishActiveTool()}var e=a.$on("$destroy",b),f=a.featureCreator;a.hasFeatures=c,a.closeTools=d}function c(){return{replace:!0,restrict:"E",scope:{featureCreator:"=",iconClass:"@?",disableWhenEmpty:"="},templateUrl:"ccri.area-definition/controls/selectButton.tpl.html",controller:"ccri.area-definition.SelectButtonCtrl",link:function(a){function b(){c(),c=null,a=null}var c=a.$on("$destroy",b);a.iconClass=a.iconClass||"fa-pencil-square-o",a.shouldDisable=function(){return!!a.disableWhenEmpty&&!a.hasFeatures()}}}}b.$inject=["$scope"],a.SelectButtonController=b,c.$inject=[],a.SelectButtonDirective=c}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",[]).controller("SelectButtonCtrl",CreateFeatures.SelectButtonController).directive("selectButton",CreateFeatures.SelectButtonDirective),angular.module("ccri.area-definition").directive("toolControlsSwitcher",["ccri.angular-utils.WidgetDef",function(a){return{restrict:"E",scope:{featureCreator:"=",toolControls:"=",showGeodesicControls:"=?"},template:'<ccri-angular-utils-widget-compiler ng-if="activeToolWidget" widget-def="activeToolWidget" widget-watch></ccri-angular-utils-widget-compiler>',link:function(b,c){function d(){j(),j=null,l&&(l.un("toolstarted",e),l.un("toolfinished",f)),c.off("keyup",g),b.activeToolWidget&&b.activeToolWidget.destroy(),b.activeToolWidget=null,k=l=null,b.featureCreator=b.toolControls=null,b=c=null}function e(a){h(a.toolName,a.tool),setTimeout(b.$apply.bind(b),0)}function f(){i(),setTimeout(b.$apply.bind(b),0)}function g(a){switch(a.keyCode){case 46:a.stopPropagation();break;case 13:break;case 27:}}function h(c,d){if(c in b.toolControls==!1)return void i();var e=b.toolControls[c]===!0?k[c]:b.toolControls[c],f=b.$new();f.tool=d,f.showGeodesicControls=b.showGeodesicControls,b.activeToolWidget&&b.activeToolWidget.destroy(),b.activeToolWidget=new a({tag:e,scope:f,isolateScope:!0})}function i(){b.activeToolWidget&&b.activeToolWidget.destroy(),b.activeToolWidget=null}var j=b.$on("$destroy",d),k={radiusCircle:"ccri-area-definition-radius-circle-controls",polygon:"ccri-area-definition-polygon-controls",mapPoint:"ccri-area-definition-map-point-controls",bufferFeature:"ccri-area-definition-buffer-feature-controls",mapView:"ccri-area-definition-map-view-controls",coordRect:"ccri-area-definition-coord-rect-controls",textVector:"ccri-area-definition-text-vector-controls",polygonSelector:"ccri-area-definition-polygon-selector-controls",wholeEarth:"ccri-area-definition-whole-earth-controls",line:"ccri-area-definition-line-controls"},l=b.featureCreator;b.activeToolWidget=null,l.on("toolstarted",e),l.on("toolfinished",f),c.on("keyup",g),setTimeout(function(){b.featureCreator.getActiveToolName()&&(h(b.featureCreator.getActiveToolName(),b.featureCreator.getActiveTool()),setTimeout(b.$apply.bind(b),0))},0)}}}]);var CreateFeatures;!function(a){function b(a){function b(){h(),h=null,i&&(i.un("toolstarted",f),i.un("toolfinished",g)),i=null,a.selectedTool=a.pickTool=null,a=null}function c(a){a?d(a):e()}function d(b){_.get(a,"selectedTool.name")!==b&&(a.loading=!0,i.startTool(b).finally(function(){a.loading=!1}))}function e(){a.loading=!0,i.finishActiveTool().finally(function(){a.loading=!1})}function f(b){a.selectedTool=_.find(a.tools,"name",b.toolName)}function g(){a.selectedTool&&(a.selectedTool=null)}var h=a.$on("$destroy",b);a.selectedTool=null,a.pickTool=c;var i=a.featureCreator;i.on("toolstarted",f),i.on("toolfinished",g)}b.$inject=["$scope"],a.ToolSelectorController=b}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",[]).controller("ToolSelectorCtrl",CreateFeatures.ToolSelectorController);var CreateFeatures;!function(a){function b(b,c,d,e,f){function g(){j(),j=null,l&&l.remove(),k=l=m=n=null,e.featureCreator=e.upload=null,e=null}function h(){d(function(){m.click()})}function i(b,d){m.value=null;var e=null;switch(d.extra.extension.toLowerCase()){case"json":var f=JSON.parse(b.target.result);switch(f.type){case"Feature":case"FeatureCollection":e=k.readFeatures(b.target.result);break;case"Polygon":case"MultiPolygon":case"GeometryCollection":e=new ol.Feature(k.readGeometry(b.target.result));break;default:return void c.debug("GeoJSON file was not an acceptable type")}break;default:return void c.debug("loaded file was not a .json file")}var g=_.isArray(e)?e:[e],h=[];g.forEach(function(b){[].concat(a.GeneratedFeature.fromFeature(b)).forEach(function(a){h.push(a)})});var i=[];h.forEach(function(a){if(a.getGeometry()instanceof ol.geom.MultiPolygon){var b=a.getProperties();delete b[a.getGeometryName()];var c=a.getGeometry().getPolygons();c.forEach(function(c){var d=_.clone(b);d[a.getGeometryName()]=c,i.push(new ol.Feature(d))})}else i.push(a)}),n.addFeatures(i)}var j=e.$on("$destroy",g),k=new f,l=angular.element('<input type="file" class="hidden">'),m=b.find("body").append(l)[0].lastChild;FileReaderJS.setupInput(m,{readAsDefault:"Text",on:{load:i}});var n=e.featureCreator;e.upload=h}function c(a,b,c){return{replace:!0,restrict:"E",scope:{featureCreator:"=",iconClass:"@?"},templateUrl:"ccri.area-definition/controls/uploadButton.tpl.html",controller:"ccri.area-definition.UploadButtonCtrl",link:function(a){a.iconClass=a.iconClass||"fa-folder-open"}}}b.$inject=["$document","$log","$timeout","$scope","stealth.core.geo.ol3.format.GeoJson"],a.UploadButtonController=b,c.$inject=["$log","$timeout","stealth.core.geo.ol3.format.GeoJson"],a.UploadButtonDirective=c}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",[]).controller("UploadButtonCtrl",CreateFeatures.UploadButtonController).directive("uploadButton",CreateFeatures.UploadButtonDirective);var CreateFeatures;!function(a){function b(){var a=/^\[?\s*([\d.+-]+)[.\s]*[, ]\s*([\d.+-]+)[.\s]*\]?$/;return{restrict:"A",require:"?ngModel",link:function(b,c,d,e){function f(){k&&_.isEqual(k,e.$modelValue)||(k=e.$modelValue,c.val(e.$viewValue))}function g(a){if(a)return a instanceof Array&&a.length>=2?(e.$setValidity("coordinate",!0),a[0]+"˚, "+a[1]+"˚"):(e.$setValidity("coordinate",!1),a)}function h(b){var c=b.match(a);if(!c||c.length<3)return void e.$setValidity("coordinate",!1);var d=[Number(c[1]),Number(c[2])];return isNaN(d[0])||isNaN(d[1])?void e.$setValidity("coordinate",!1):(e.$setValidity("coordinate",!0),k&&_.isEqual(k,d)?k:(k=d,d))}function i(){j(),j=null,k=null,b=c=d=e=null}var j=b.$on("$destroy",i);if(e){e.$render=f,e.$formatters.push(g),e.$parsers.unshift(h);var k}}}}function c(){return{restrict:"A",require:"ngModel",scope:{},link:function(a,b,c,d){function e(a){if(null==a)return a;var b=a.toFixed(m);return Number(b)}function f(a){if(d.$isEmpty(a))return a;if("string"!=typeof a)throw"Programmer error";for(var b=a.split(".")[1],c=b?b.length:0,e="",f=m-c;f>0;f--)e+="0";return a+(b?"":".")+e}function g(){var a=d.$viewValue;if(null!==a){var c=j(Number(a));b.val(c)}}function h(a){return _.isEmpty(a)?0:parseFloat(a)}function i(a){var b=a.target.value;d.$isEmpty(b)||(a.target.value=j(parseFloat(b)))}function j(a){return a.toFixed(m)}function k(){l(),l=null,b.off("blur",i),a=b=c=d=null}var l=a.$on("$destroy",k),m=4,n="0.00000",o="0.00001";_.isEmpty(b.attr("placeholder"))&&b.attr("placeholder",n),_.isEmpty(b.attr("step"))&&b.attr("step",o),d.$formatters.push(e),d.$formatters.unshift(f),d.$render=g,d.$parsers.unshift(h),b.on("blur",i)}}}b.$inject=[],a.CoordInputDirective=b,c.$inject=[],a.DecimalInputDirective=c}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").directive("coordInput",CreateFeatures.CoordInputDirective).directive("decimalInput",CreateFeatures.DecimalInputDirective);var CreateFeatures;!function(a){function b(a,b){function c(a){for(var b=0,c=e.length;b<c&&("function"!=typeof e[b].handleKeyPress||!e[b].handleKeyPress(a));b++);}function d(a){for(var b=0,c=e.length;b<c&&("function"!=typeof e[b].handleMapClick||!e[b].handleMapClick(a));b++);}var e=[];a.find("body").on("keyup",c);var f=b.getMap();return f.on("singleclick",d),{list:e}}a.EventDelegatorFactory=b}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map"]).factory("EventDelegator",["$document","ol3Map",CreateFeatures.EventDelegatorFactory]);var CreateFeatures;!function(a){var b;!function(b){function c(a,b){return!(!a||!b)&&(a.geoserverId?a.geoserverId===b.geoserverId:a._importId?a._importId===b._importId:void 0)}function d(a,b,c,d,e,r,s,t,u,v,w){return g=a,h=b,i=c,j=d,k=e,l=r,m=s,n=t,o=u,p=v,q=w,f}function e(a,b){function c(c){function d(){u(),u=null,y&&y(),y=null,z&&z(),z=null,v.un("propertieschanged",n),v.un("buffer_busy_start",q),v.un("buffer_busy_end",r),v.un("layer_load_start",s),v.un("layer_load_end",t),x=w=null,v=c.tool=null,c.toolParams=c.coordinates=c.layers=c.units=null,c=null}function e(){var a=_.compact(_.map(b.getLayers(),f));if(c.toolParams.selectedLayer&&c.toolParams.selectedLayer._importId){var d=_.find(a,"_importId",c.toolParams.selectedLayer._importId);d?a.splice(_.findIndex(a,d),1,c.toolParams.selectedLayer):(c.toolParams.selectedLayer=null,l())}var e=_.map(w,h);c.layers=_.sortBy(_.union(a,e),"name"),c.toolParams.selectedLayer&&p(c.toolParams.selectedLayer).then(function(a){c.toolParams.selectedLayer=a})}function f(a){return a.getSource?{name:a.name,geoserverId:null,_importId:a._importId,KeywordConfig:null,features:a.getSource().getFeatures()}:null}function h(a){return{name:a.Title,geoserverId:a.Name,_importId:null,KeywordConfig:a.KeywordConfig,features:null}}function i(a){return a.name}function k(){var a=v.updateProperties({distance:c.toolParams.distance});o(a)}function l(){var a=v.updateProperties({layer:c.toolParams.selectedLayer});o(a)}function m(){var a=v.updateProperties({unit:c.toolParams.selectedUnit});o(a)}function n(){var a=v.getProperties();o(a)}function o(a){c.toolParams.distance=a.distance,c.toolParams.selectedUnit=a.unit,a.layer?(p(a.layer).then(function(a){c.toolParams.selectedLayer=a,c.toolParams.selectedLayer||l()}),A=_.get(a.layer,"KeywordConfig.capability.buffer.field.name","name")):A=null,
a.selectedFeatureProps?c.selectedFeatureName=a.selectedFeatureProps[A]||"unknown":c.selectedFeatureName=null,c.coordinates=v.getCoordinates()}function p(a){return g(function(b){b(a._importId?_.find(c.layers,"_importId",a._importId):x.then(function(){return _.find(c.layers,"geoserverId",a.geoserverId)}))})}function q(){c.bufferLoading=!0}function r(){c.bufferLoading=!1}function s(){c.layerLoading=!0}function t(){c.layerLoading=!1}var u=c.$on("$destroy",d),v=c.tool;c.toolParams={selectedLayer:null,distance:null,selectedUnit:null},c.coordinates=null,c.layers=[],c.layerLoading=!1,c.bufferLoading=!1,c.units=["kilometers","miles","nautical miles"],v.on("propertieschanged",n),v.on("buffer_busy_start",q),v.on("buffer_busy_end",r),v.on("layer_load_start",s),v.on("layer_load_end",t),c.updateDistance=k,c.labelLayer=i,c.chooseLayer=l,c.chooseUnit=m,c.toolParams.selectedUnit=c.units[0];var w,x=DataSourceManager.loadDataSources().then(function(){var a=DataSourceManager.getDataSourcesByKeyword(["capability","buffer"]);w=a.map(function(a){return DataSourceManager.buildLegacyLayer(a)}).toArray()});e(),x.then(function(){e()});var y=a.$on("ImportCache-layerAdded",e),z=a.$on("ImportCache-layerRemoved",e),A=null;n(),j.layer&&(c.toolParams.selectedLayer=j.layer,l())}return{restrict:"E",templateUrl:"ccri.area-definition/tools/bufferFeature.tpl.html",link:c}}var f=function(b){function d(){var a=b.call(this)||this;return a.toolName="bufferFeature",a.map=n.getMap(),a.defaultLastPaintProperties={distance:null,layer:null,selectedFeatureProps:null,unit:null},a.lastPaintProperties=_.cloneDeep(a.defaultLastPaintProperties),a.defaultProperties={distance:0,layer:null,selectedFeatureProps:null,unit:"miles"},a.properties=_.cloneDeep(a.defaultProperties),a.selectedFeature=null,a.is_painting=!1,a.layerLoadCount=0,a.isLoadingLayer=!1,a.destroyed=!1,a.on("destroy",a.destroy,a),a.spatialAnalysis=new l,a.format=new p,a}return __extends(d,b),d.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.selectable&&n.removeLayerOverlay(this.selectable),this.selected&&n.removeLayerOverlay(this.selected),this.target&&n.removeLayerOverlay(this.target),this.buffer&&n.removeLayerOverlay(this.buffer),this.map=this.selectable=this.selected=this.target=this.buffer=null,this.selectedFeature=null,this.spatialAnalysis&&this.spatialAnalysis.destroy(),this.spatialAnalysis=this.format=null,this.defaultLastPaintProperties=this.lastPaintProperties=this.defaultProperties=this.properties=null,this.p_repaint=null,this.destroyed=!0},d.prototype.activate=function(a){return a?g.reject("not supported"):(this.selectable=this.createSelectableOverlay(),this.selected=this.createSelectedOverlay(),this.target=this.createTargetOverlay(),this.buffer=this.createBufferOverlay(),this.spatialAnalysis.activate(),n.addLayerOverlay(this.selectable),n.addLayerOverlay(this.selected),n.addLayerOverlay(this.target),n.addLayerOverlay(this.buffer),g.resolve())},d.prototype.clear=function(){return this.selected.getSource().clear(),this.target.getSource().clear(),this.buffer.getSource().clear(),this.selectedFeature=null,this.lastPaintProperties.selectedFeatureProps=null,this.properties.selectedFeatureProps=null,this.dispatchEvent({type:"buffer_busy_end"}),this.dispatchEvent({type:"propertieschanged"}),g.when()},d.prototype.finish=function(){var a=this;return this.spatialAnalysis.finish().then(function(){return a.buffer.getSource().getFeatures().length?a.buffer.getSource().getFeatures():a.selected.getSource().getFeatures()}).finally(function(){a.dispatchEvent({type:"destroy"})})},d.prototype.startBuffering=function(){return this.properties.layer&&!isNaN(this.properties.distance)&&this.selectedFeature?this.spatialAnalysis.buffer(this.selectedFeature,a.convertUnits(this.properties.distance,this.properties.unit,"miles"),"miles"):g.reject("Missing parameters")},d.prototype.getCoordinates=function(){var a=this.buffer.getSource().getFeatures().length?this.buffer.getSource().getFeatures():this.selectedFeature?[this.selectedFeature]:null;if(a&&a.length){var b=[];return a.forEach(function(a){var c=a.getGeometry();c.getCoordinates().forEach(function(a){b.push(c instanceof ol.geom.MultiPolygon?a[0]:a)})}),1===b.length?b[0]:b}},d.prototype.getProperties=function(){return _.clone(this.properties)},d.prototype.updateProperties=function(a){var b=this,c=this.updateProperties_(a);return c&&(this.is_painting?this.p_repaint.then(function(){b.dispatchEvent({type:"propertieschanged"})}):this.dispatchEvent({type:"propertieschanged"})),this.getProperties()},d.prototype.updateProperties_=function(b){var d=this;b.unit&&!~["miles","kilometers","nautical miles"].indexOf(b.unit)&&delete b.unit,b.unit&&b.unit!==this.properties.unit&&(b.distance=a.convertUnits(isNaN(b.distance)?this.properties.distance:b.distance,this.properties.unit,b.unit)),"layer"in b&&!c(this.properties.layer,b.layer)&&(c(j.layer,b.layer)||(j.layer=b.layer,j.geojson=null),this.selectedFeature=null,this.properties.selectedFeatureProps=null,delete b.selectedFeatureProps);var e=a.FeatureGeneratorTool.changeProperties(this.properties,b);return e&&(this.is_painting=!0,this.p_repaint=this.repaint().then(function(){d.is_painting=!1})),e},d.prototype.hasFeature=function(){return this.buffer&&!!this.buffer.getSource().getFeatures().length||!!this.selectedFeature},d.prototype.getActiveFeatures=function(){var a=[];return this.buffer&&this.buffer.getSource().getFeatures().length?a=this.buffer.getSource().getFeatures():this.selectedFeature&&(a=[this.selectedFeature]),g.when(a)},d.prototype.handleMapClick=function(a){var b=this.map.getCoordinateFromPixel(this.map.getEventPixel(a.originalEvent)),c=this.map.getView().getResolution(),d=null;this.properties.layer&&(d=this.properties.layer.KeywordConfig);var e=m.getSearchExtent(b,c,d),f=[];if(this.selectable.getSource().forEachFeatureIntersectingExtent(e,function(a){f.push(a)}),0===f.length)return this.selectedFeature=null,this.updateProperties({selectedFeatureProps:null}),!0;var g=m.sortAndTrimFeatures(b,f)[0];return this.selectedFeature=g.clone(),this.updateProperties({selectedFeatureProps:g.getProperties()}),!0},d.prototype.clearOverlay=function(a){a.getSource().clear(!0)},d.prototype.repaint=function(){var a=this,b=_.clone(this.lastPaintProperties);if(this.lastPaintProperties=_.clone(this.properties),!this.properties.layer)return this.clearOverlay(this.selectable),this.clearOverlay(this.selected),this.clearOverlay(this.target),this.clearOverlay(this.buffer),this.selectedFeature=null,g.when();if(b.layer!==this.properties.layer){var c=++this.layerLoadCount;this.clearOverlay(this.selectable),this.clearOverlay(this.selected),this.clearOverlay(this.target),this.clearOverlay(this.buffer),this.selectedFeature=null,this.dispatchEvent({type:"layer_load_start"}),this.isLoadingLayer=!0;var d;if(_.isEmpty(this.properties.layer.features)){if(j.layer&&j.geojson&&j.layer.geoserverId&&j.layer.geoserverId===this.properties.layer.geoserverId)d=i(function(){return j.geojson},100);else{var e=DataSourceManager.getPrimaryOgcConfig();d=OwsUtils.WfsManager.getFeature(e.url+_.get(e,"wfsEndpoint","/wfs"),this.properties.layer.geoserverId).then(function(b){return c<a.layerLoadCount?g.reject():(j.geojson=b,b)})}d.then(function(b){var c=a.format.readFeatures(b);a.selectable.getSource().addFeatures(c)})}else this.selectable.getSource().addFeatures(this.properties.layer.features),d=i(100);return d.finally(function(){c<a.layerLoadCount&&a.isLoadingLayer||(a.dispatchEvent({type:"layer_load_end"}),a.isLoadingLayer=!1)}),d}if(!this.properties.selectedFeatureProps)return this.clearOverlay(this.selected),this.clearOverlay(this.target),this.clearOverlay(this.buffer),g.when();if(_.isEqual(b.selectedFeatureProps,this.properties.selectedFeatureProps)||(this.clearOverlay(this.selected),this.clearOverlay(this.target),this.clearOverlay(this.buffer),this.paintLayerSelected(this.selectedFeature)),!this.properties.distance||!this.properties.unit)return this.clearOverlay(this.target),this.clearOverlay(this.buffer),this.selectedFeature&&(this.clearOverlay(this.selected),this.paintLayerSelected(this.selectedFeature)),g.when();if(!_.isEqual(b.selectedFeatureProps,this.properties.selectedFeatureProps)||b.distance!==this.properties.distance||b.unit!==this.properties.unit){this.clearOverlay(this.selected),this.paintLayerSelected(this.selectedFeature),this.clearOverlay(this.target),this.clearOverlay(this.buffer),this.dispatchEvent({type:"buffer_busy_start"});var f=this.startBuffering().then(function(b){a.dispatchEvent({type:"buffer_busy_end"}),a.clearOverlay(a.selected),a.clearOverlay(a.target),a.clearOverlay(a.buffer),a.paintLayerTarget(a.selectedFeature),a.paintLayerBuffer(b)}).catch(function(b){a.destroyed||"new buffer started"!==b&&a.clearOverlay(a.target)});return f}},d.prototype.paintLayerSelected=function(a){this.selected.getSource().addFeature(a)},d.prototype.paintLayerTarget=function(a){this.target.getSource().addFeature(a)},d.prototype.paintLayerBuffer=function(a){this.buffer.getSource().addFeature(a)},d.prototype.createSelectableOverlay=function(){return this.createOverlay({style:k.features_selectable})},d.prototype.createSelectedOverlay=function(){return this.createOverlay({style:k.features_selected})},d.prototype.createTargetOverlay=function(){return this.createOverlay({style:k.features_buffertarget})},d.prototype.createBufferOverlay=function(){return this.createOverlay({style:k.features_buffered})},d.prototype.createOverlay=function(a){var b=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0});return new ol.layer.Vector({source:b,style:a.style})},d}(a.FeatureGeneratorTool);b.BufferFeatureTool=f;var g,h,i,j,k,l,m,n,o,p,q;d.$inject=["$q","$log","$timeout","ccri.area-definition.bufferFeatureStore","ccri.area-definition.colors","ccri.area-definition.spatialAnalysis","clickSearchHelper","ol3Map","ol3Styles","stealth.core.geo.ol3.format.GeoJson","stealth.core.geo.ol3.overlays.Vector"],b.ToolService=d,e.$inject=["$rootScope","ImportCache"],b.ControlsDirective=e;var r=function(){function a(){this.layer=null,this.geojson=null}return a}();b.PropertyStore=r,r.$inject=[]}(b=a.BufferFeature||(a.BufferFeature={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.import.category","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style","stealth.core.utils"]).factory("BufferFeatureTool",CreateFeatures.BufferFeature.ToolService).service("bufferFeatureStore",CreateFeatures.BufferFeature.PropertyStore).directive("bufferFeatureControls",CreateFeatures.BufferFeature.ControlsDirective);var CreateFeatures;!function(a){function b(){return{restrict:"E",templateUrl:"ccri.area-definition/tools/common/coordinateBox.tpl.html",scope:{coordinates:"="},link:function(a,b,c){function d(a){_.each(a,function(a){_.isEmpty(a)||(a[0]=parseFloat(a[0].toFixed(4)),a[1]=parseFloat(a[1].toFixed(4)))})}function e(){f(),f=null,g(),g=null,a=b=null}var f=a.$on("$destroy",e);a.isMultiPolygon=!1;var g=a.$watch("coordinates",function(){a.isMultiPolygon=a.coordinates&&_.isArray(a.coordinates[0])&&_.isArray(a.coordinates[0][0]),a.isMultiPolygon?_.each(a.coordinates,function(a){d(a)}):d(a.coordinates)})}}}b.$inject=[],a.CoordinateBoxDirective=b}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").directive("coordinateBox",CreateFeatures.CoordinateBoxDirective);var CreateFeatures;!function(a){var b,c=function(){function a(a){this.$scope=a,b=!1,this.isOpen=b}return a.prototype.toggleOpen=function(){b=!b,this.isOpen=b,this.$scope.$broadcast("ccri.area-definition.toggle-details")},a.$inject=["$scope"],a}();a.MoreDetailsToggleController=c;var d=function(){function a(a){function c(){e(),e=null,f(),f=null,a=null}var d=this;this.isOpen=b;var e=a.$on("$destroy",c),f=a.$on("ccri.area-definition.toggle-details",function(a){d.isOpen=b})}return a.$inject=["$scope"],a}();a.MoreDetailsDisplayController=d}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").directive("moreDetailsDisplay",[function(){return{restrict:"E",scope:{},transclude:!0,templateUrl:"ccri.area-definition/tools/common/more-details-display.tpl.html",bindToController:!0,controller:CreateFeatures.MoreDetailsDisplayController,controllerAs:"areaDefDetailsDisplayCtrl"}}]).directive("moreDetailsToggle",[function(){return{restrict:"E",templateUrl:"ccri.area-definition/tools/common/more-details-toggle.tpl.html",bindToController:!0,controller:CreateFeatures.MoreDetailsToggleController,controllerAs:"areaDefDetailsToggleCtrl"}}]);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,k){return f=a,g=b,h=c,i=d,j=k,e}function d(){var a=function(a){function b(){f(),f=null,g.un(["propertieschanged","featurescreated"],h),g=a.tool=null,a.toolParams=a.coordinates=null,a.changed=_.noop,a=null}function c(b){a.toolParams.north=null==b.north?0:b.north,a.toolParams.south=null==b.south?0:b.south,a.toolParams.east=null==b.east?0:b.east,a.toolParams.west=null==b.west?0:b.west,a.coordinates=g.getCoordinates(),a.coordinates?a.area=Math.abs(new ol.Sphere(6378137).geodesicArea(a.coordinates)/1e3/1e3):a.area=0,setTimeout(a.$apply.bind(a),0)}function d(){var a=g.getProperties();c(a)}function e(){var b=g.updateProperties({north:a.toolParams.north,south:a.toolParams.south,east:a.toolParams.east,west:a.toolParams.west});c(b)}var f=a.$on("$destroy",b),g=a.tool;a.toolParams={north:null,south:null,east:null,west:null,originalGeometry:null},a.area=0,a.coordinates=null,d();var h=_.throttle(function(){_.defer(d)},100);g.on(["propertieschanged","featurescreated"],h),a.changed=e};return{restrict:"E",templateUrl:"ccri.area-definition/tools/coordRect.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="coordRect",a.map=i.getMap(),a.isDrawing=!1,a.activeFeature=null,a.emptyProperties={north:null,south:null,east:null,west:null,originalGeometry:null},a.properties=_.cloneDeep(a.emptyProperties),a.dragging=!1,a.destroyed=!1,a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.destroyed=!0,this.overlay&&i.removeLayerOverlay(this.overlay),this._draw&&(this.map&&this.map&&this.map.removeInteraction(this._draw),this.isDrawing=!1,this._draw.un("drawstart",this.onDrawStart,this),this._draw.un("drawend",this.onDrawEnd,this)),this.overlaySource&&this.overlaySource.clear(!0),this.overlaySource=this.overlay=null,this.map=this._draw=null,this.activeFeature=this.emptyProperties=this.properties=null},c.prototype.activate=function(a){if(this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource,style:g.active}),this.overlay.setProperties({name:"Rectangle Tool"}),i.addLayerOverlay(this.overlay),a){var b=a[0].getProperties().toolProperties;if(!(_.isNumber(b.north)&&_.isNumber(b.south)&&_.isNumber(b.east)&&_.isNumber(b.west)))return f.reject("Missing required parameters");this.updateProperties(b)}else this._draw=new ol.interaction.Draw({type:"LineString",style:g.draw,geometryFunction:function(a,b){b||(b=new ol.geom.Polygon(null));var c=a[0],d=a[1]||[0,0];return b.setCoordinates([[c,[c[0],d[1]],d,[d[0],c[1]],c]]),b},maxPoints:2}),this.map.addInteraction(this._draw),this.isDrawing=!0,this._draw.on("drawstart",this.onDrawStart,this),this._draw.on("drawend",this.onDrawEnd,this);return f.resolve()},c.prototype.onDrawStart=function(){if(this.drawInProgress=!0,this.dispatchEvent({type:"drawstart"}),this.activeFeature){var a=this.activeFeature;this.clearActiveFeature(),this.clearProperties(),this.sendFeature(a)}},c.prototype.onDrawEnd=function(b){this.drawInProgress=!1,this.destroyed&&this.destroy();var c=b.feature.getGeometry().clone(),d=c.getExtent();this.updateProperties_({north:d[3],south:d[1],east:d[2],west:d[0],originalGeometry:c.clone()},!0);var e=c.getCoordinates()[0],f=[];f.push(e[0]);for(var g=1;g<e.length;g++){var h=[];h.push((e[g-1][0]+e[g][0])/2),h.push((e[g-1][1]+e[g][1])/2),f.push(h),f.push(e[g])}c.setCoordinates([f]),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:c}),this.overlaySource.addFeature(this.activeFeature),this.dispatchEvent({type:"propertieschanged"})},c.prototype.handleMapClick=function(a){return!!this.isDrawing},c.prototype.sendFeature=function(a){var b=a?[a]:[];this.dispatchEvent({type:"featurescreated",features:b})},c.prototype.clearActiveFeature=function(){this.activeFeature&&(this.overlaySource.removeFeature(this.activeFeature),this.activeFeature=null)},c.prototype.clearProperties=function(){this.properties=_.cloneDeep(this.emptyProperties)},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()[0]},c.prototype.updateProperties=function(a,b){void 0===b&&(b=!1);var c=this.updateProperties_(a,b);return c&&this.dispatchEvent({type:"propertieschanged"}),this.getProperties()},c.prototype.updateProperties_=function(b,c){void 0===c&&(c=!1);var d=a.FeatureGeneratorTool.changeProperties(this.properties,b);return d&&!c&&this.repaint(),d},c.prototype.repaint=function(){_.isNumber(this.properties.north)&&_.isNumber(this.properties.south)&&_.isNumber(this.properties.east)&&_.isNumber(this.properties.west)&&(this.clearActiveFeature(),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:ol.geom.Polygon.fromExtent([this.properties.west,this.properties.south,this.properties.east,this.properties.north])}),this.overlaySource.addFeature(this.activeFeature))},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.drawInProgress&&this._draw.finishDrawing(),this.clearProperties(),this.clearActiveFeature(),this.dispatchEvent({type:"propertieschanged"}),f.when()},c.prototype.finish=function(){var a=this.activeFeature;return this.dispatchEvent({type:"destroy"}),a?[a]:[]},c}(a.FeatureGeneratorTool);b.CoordRectTool=e;var f,g,h,i,j;c.$inject=["$q","ccri.area-definition.colors","stealth.core.geo.ol3.overlays.Vector","ol3Map","ol3Styles"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.CoordRect||(a.CoordRect={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("CoordRectTool",CreateFeatures.CoordRect.ToolService).directive("coordRectControls",CreateFeatures.CoordRect.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,l,m){return f=a,g=b,h=c,i=d,j=l,k=m,e}function d(){var a=function(a){function b(a){i.clear().then(function(){i.setGeodesic(a),i.startNewDrawing()})}function c(a){i.setArrows(a)}function d(){h(),h=null,i.un(["propertieschanged","featurescreated"],j),i=a.tool=null,a.unitsOpts=a.toolParams=a.coordinates=null,a.labelUnit=a.changed=_.noop,a=null}function e(b){a.coordinates=i.getCoordinates(),setTimeout(a.$apply.bind(a),0)}function f(){var a=i.getProperties();e(a)}function g(){}var h=a.$on("$destroy",d),i=a.tool;i.setGeodesic(a.geodesic!==!1),a.isArrows=!1,a.toolParams={},a.changed=g,a.changeMode=b,a.setArrows=c,f(),a.changed();var j=_.throttle(function(){_.defer(f)},100);i.on(["propertieschanged","featurescreated"],j)};return{restrict:"E",templateUrl:"ccri.area-definition/tools/line.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="line",a.map=i.getMap(),a.isDrawing=!1,a.activeFeature=null,a.emptyProperties={coordinates:[],arrow:a.arrows,geodesic:a.geodesic},a.properties=_.cloneDeep(a.emptyProperties),a.supportedUnits=["km","nm","mi"],a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.overlay&&i.removeLayerOverlay(this.overlay),this._draw&&(this.map&&this.map.removeInteraction(this._draw),this.isDrawing=!1,this._draw.un("drawstart",this.onDrawStart,this),this._draw.un("drawend",this.onDrawEnd,this)),this.overlaySource=null,this.map=this.overlay=null,this._draw=this.activeFeature=this._drawNegativeMirror=this._drawPositiveMirror=null,this.emptyProperties=this.properties=this.supportedUnits=null},c.prototype.activate=function(a){if(this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource,style:g.active}),this.overlay.setProperties({name:"Line Tool"}),i.addLayerOverlay(this.overlay),a){var b=a[0].getProperties().toolProperties;this.setArrows(b.arrow),this.setGeodesic(b.geodesic),this.updateProperties(b)}else this.startNewDrawing();return this._drawPositiveMirror=new ol.Feature,this._drawNegativeMirror=new ol.Feature,f.resolve()},c.prototype.onDrawStart=function(a){if(this.drawInProgress=!0,this.dispatchEvent({type:"drawstart"}),this.activeFeature){var b=this.activeFeature;this.clearDisplay(),this.clearProperties(),this.sendFeature(b)}this.overlaySource.addFeature(this._drawNegativeMirror),this.overlaySource.addFeature(this._drawPositiveMirror)},c.prototype.onDrawEnd=function(b){var d=this;this.drawInProgress=!1;var e,f=[];if(this.geodesic){var h=b.feature.getGeometry(),i=h.getCoordinates(),j=_.map(i,function(a){return d.makeGeodesicLine(a).getCoordinates()})[0];h.setCoordinates(j),e=h,f=j}else{var h=b.feature.getGeometry();e=h,f=h.getCoordinates()}this.updateProperties_({coordinates:f,arrow:this.arrows,geodesic:this.geodesic},!0),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:e}),this.overlaySource.addFeature(this.activeFeature),this.arrows&&g.addArrow(c.getStartAndEndPoints(this.activeFeature,this.geodesic),this.activeFeature,!0),this.dispatchEvent({type:"featurescreated"})},c.prototype.handleMapClick=function(a){return!!this.isDrawing},c.prototype.sendFeature=function(a){this.arrows&&g.addArrow(c.getStartAndEndPoints(a,this.geodesic),a,!1);var b=a?[a]:[];this.dispatchEvent({type:"featurescreated",features:b})},c.prototype.clearDisplay=function(){this.activeFeature&&(this.activeFeature=null),this.overlaySource.clear()},c.prototype.clearProperties=function(){this.properties=_.cloneDeep(this.emptyProperties)},c.getStartAndEndPoints=function(a,b){if(a&&a.getProperties().toolProperties.coordinates){var c=a.getProperties().toolProperties.coordinates,d=_.first(c),e=_.last(c);return b&&(d=_.first(_.last(c)),e=_.last(_.last(c))),{start:d,end:e}}return null},c.prototype.makeGeodesicLine=function(a,b){void 0===b&&(b=0);var c=new ol.geom.MultiLineString(_(a).map(function(c,d){if(d+1===a.length)return null;_.isEqual(c,a[d+1])&&(a[d+1][0]+=.1);var e=new arc.GreatCircle({x:c[0],y:c[1]},{x:a[d+1][0],y:a[d+1][1]}),f=0;return e.Arc(16,{offset:.001}).geometries[0].coords.map(function(a,c,d){var e=a[0];if(a[0]+=f,c<d.length-1){var g=d[c+1][0]-e;g<-180?f=360:g>180&&(f=-360)}return a[0]+=b,a})}).compact().value());return c},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()},c.prototype.getGeodesicLine=function(){var a=this;return new ol.interaction.Draw({type:"MultiLineString",style:g.draw,geometryFunction:function(b,c){return c||(c=new ol.geom.MultiLineString(null)),c.setCoordinates(a.makeGeodesicLine(b).getCoordinates()),a._drawNegativeMirror.setGeometry(new ol.geom.MultiLineString(a.makeGeodesicLine(b,-360).getCoordinates())),a._drawPositiveMirror.setGeometry(new ol.geom.MultiLineString(a.makeGeodesicLine(b,360).getCoordinates())),c}})},c.prototype.getLine=function(){return new ol.interaction.Draw({type:"LineString",style:g.draw})},c.prototype.startNewDrawing=function(){this._draw&&this.map.removeInteraction(this._draw),this._draw=this.geodesic?this.getGeodesicLine():this.getLine(),this.map.addInteraction(this._draw),this.isDrawing=!0,this._draw.on("drawstart",this.onDrawStart,this),this._draw.on("drawend",this.onDrawEnd,this)},c.prototype.updateProperties=function(a,b){void 0===b&&(b=!1);var c=this.updateProperties_(a,b);return c&&this.dispatchEvent({type:"propertieschanged"}),this.getProperties()},c.prototype.updateProperties_=function(b,c){void 0===c&&(c=!1);var d=a.FeatureGeneratorTool.changeProperties(this.properties,b);return d&&!c&&this.repaint(),d},c.prototype.repaint=function(){this.clearDisplay(),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:new ol.geom.MultiLineString(this.properties.coordinates)}),this.arrows&&g.addArrow(c.getStartAndEndPoints(this.activeFeature,this.geodesic),this.overlay,!0),this.overlaySource.addFeature(this.activeFeature)},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.drawInProgress&&this._draw.finishDrawing(),this.clearDisplay(),this.clearProperties(),this.dispatchEvent({type:"propertieschanged"}),f.when()},c.prototype.finish=function(){var a=this.activeFeature;return this.arrows&&g.addArrow(c.getStartAndEndPoints(a,this.geodesic),a,!1),this.dispatchEvent({type:"destroy"}),a?[a]:[]},c.prototype.setArrows=function(a){if(this.activeFeature){var b=this.activeFeature;this.clearDisplay(),this.clearProperties(),this.sendFeature(b)}a===!1&&this.overlay.setStyle(g.active),this.arrows=a},c.prototype.isArrows=function(){return this.arrows},c}(a.FeatureGeneratorTool);b.LineTool=e;var f,g,h,i,j,k;c.$inject=["$q","ccri.area-definition.colors","ol3Geodetics","ol3Map","stealth.core.geo.ol3.overlays.Vector","ol3Styles"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.Line||(a.Line={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("LineTool",CreateFeatures.Line.ToolService).directive("lineControls",CreateFeatures.Line.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,k){return f=a,g=b,h=c,i=d,j=k,e}function d(){var a=function(a){function b(){f(),f=null,g.un(["propertieschanged","featurescreated"],h),g=a.tool=null,a.coordinates=null,a.changed=_.noop,a=null}function c(b){a.toolParams.coordinates=_.clone(b.coordinates),setTimeout(a.$apply.bind(a),0)}function d(){var a=g.getProperties();c(a)}function e(){if(a.toolParams.coordinates instanceof Array){var b=g.updateProperties(a.toolParams);c(b)}}var f=a.$on("$destroy",b),g=a.tool;a.toolParams={coordinates:null},a.coordinates=null,a.changed=e,d();var h=_.throttle(function(){_.defer(d)},100);g.on(["propertieschanged","featurescreated"],h)};return{restrict:"E",templateUrl:"ccri.area-definition/tools/mapPoint.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.map=g.getMap(),a.isDrawing=!1,a.activeFeature=null,a.emptyProperties={coordinates:[]},a.properties=_.cloneDeep(a.emptyProperties),a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.overlay&&g.removeLayerOverlay(this.overlay),this._draw&&(this.map&&this.map.removeInteraction(this._draw),this.isDrawing=!1,this._draw.un("drawStart",this.doDraw,this)),this.overlaySource=null,this.map=this.overlay=null,this._draw=this.activeFeature=null,this.emptyProperties=this.properties=null},c.prototype.activate=function(a){if(this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource,style:i.active}),this.overlay.setProperties({name:"Point Tool"}),g.addLayerOverlay(this.overlay),a){var b=a[0].getProperties().toolProperties;if(!b)return f.reject("Don't know where this is");this.updateProperties(b)}else this._draw=new ol.interaction.Draw({type:"Point",style:i.draw}),this.map.addInteraction(this._draw),this.isDrawing=!0,this._draw.on("drawstart",this.doDraw,this);return f.resolve()},c.prototype.doDraw=function(b){if(this.dispatchEvent({type:"drawstart"}),this.activeFeature){var c=this.activeFeature;this.clearActiveFeature(),this.clearProperties(),this.sendFeature(c)}var d=b.feature.getGeometry().clone();this.properties.coordinates=d.getCoordinates(),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:d}),this.overlaySource.addFeature(this.activeFeature),this.dispatchEvent({type:"propertieschanged"})},c.prototype.handleMapClick=function(a){return!!this.isDrawing},c.prototype.sendFeature=function(a){var b=a?[a]:[];this.dispatchEvent({type:"featurescreated",features:b})},c.prototype.clearActiveFeature=function(){this.activeFeature&&(this.overlaySource.removeFeature(this.activeFeature),this.activeFeature=null)},c.prototype.clearProperties=function(){this.properties=_.cloneDeep(this.emptyProperties)},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()[0]},c.prototype.updateProperties=function(b){var c=a.FeatureGeneratorTool.changeProperties(this.properties,b);return c&&(this.repaint(),this.dispatchEvent({type:"propertieschanged"})),this.getProperties()},c.prototype.repaint=function(){this.properties.coordinates&&this.properties.coordinates.length>=2&&!isNaN(this.properties.coordinates[0])&&!isNaN(this.properties.coordinates[1])&&(this.clearActiveFeature(),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:new ol.geom.Point(this.properties.coordinates)}),this.overlaySource.addFeature(this.activeFeature))},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.clearActiveFeature(),this.clearProperties(),this.dispatchEvent({type:"propertieschanged"}),f.when()},c.prototype.finish=function(){var a=this.activeFeature;return this.dispatchEvent({type:"destroy"}),a?[a]:[]},c}(a.FeatureGeneratorTool);b.MapPointTool=e;var f,g,h,i,j;c.$inject=["$q","ol3Map","stealth.core.geo.ol3.overlays.Vector","ccri.area-definition.colors","ol3Styles"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.MapPoint||(a.MapPoint={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("MapPointTool",CreateFeatures.MapPoint.ToolService).directive("mapPointControls",CreateFeatures.MapPoint.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c){return f=a,g=b,h=c,e}function d(){var a=function(a){function b(){g(),g=null,h.un(["propertieschanged","featurescreated"],f),h.un("cleared",e),h=a.tool=null,a.coordinates=null,a.capture=_.noop,a=null}function c(){h.capture(),a.isCaptured=!0}function d(b){a.coordinates=h.getCoordinates()}function e(b){a.isCaptured=!1,f()}function f(){var a=h.getProperties();d(a)}var g=a.$on("$destroy",b),h=a.tool;a.coordinates=null,a.isCaptured=!1,a.capture=c,f(),h.on(["propertieschanged","featurescreated"],f),h.on("cleared",e),c()};return{restrict:"E",templateUrl:"ccri.area-definition/tools/mapView.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="mapView",a.map=h.getMap(),a.properties={},a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.overlay&&h.removeLayerOverlay(this.overlay),this.overlaySource=this.overlay=this.map=null,this.activeFeature=this.properties=null},c.prototype.activate=function(a){return a?f.reject("not supported"):(this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource,style:g.active}),this.overlay.setProperties({name:"Map View Tool"
}),h.addLayerOverlay(this.overlay),f.resolve())},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()[0]},c.prototype.updateProperties=function(a){return this.getProperties()},c.prototype.capture=function(){this.activeFeature&&this.clear();var b=this.map.getView(),c=b.calculateExtent(this.map.getSize()),d=ol.extent.getIntersection(c,ol.extent.boundingExtent([[-720,-90],[720,90]]));ol.extent.getWidth(d)>=360&&(d[0]=-180,d[2]=180),this.activeFeature=new a.GeneratedFeature("coordRect",{north:d[3],south:d[1],east:d[2],west:d[0]},{geometry:ol.geom.Polygon.fromExtent(d)}),this.overlaySource.addFeature(this.activeFeature),this.dispatchEvent({type:"propertieschanged"})},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.overlaySource.clear(),this.activeFeature=null,this.dispatchEvent("cleared"),f.when()},c.prototype.finish=function(){var a=this.activeFeature?[this.activeFeature]:[];return this.dispatchEvent({type:"destroy"}),a},c}(a.FeatureGeneratorTool);b.MapViewTool=e;var f,g,h;c.$inject=["$q","ccri.area-definition.colors","ol3Map"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.MapView||(a.MapView={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map"]).factory("MapViewTool",CreateFeatures.MapView.ToolService).directive("mapViewControls",CreateFeatures.MapView.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,m,n,o){return f=a,g=b,h=c,i=d,j=m,k=n,l=o,e}function d(){var a=function(a){function b(){h(),h=null,i.un(["propertieschanged","featurescreated"],j),i=a.tool=null,a.unitsOpts=a.points=a.coordinates=null,a.labelUnit=a.pickUnit=a.changed=_.noop,a=null}function c(b){var c=_.find(a.unitsOpts,"name",b);if(c)return c.label}function d(b){a.units=b,a.changed()}function e(b){a.points=_.clone(b.points),a.units=b.units,a.buffer=b.buffer;var c=i.getCoordinates();a.coordinates=c,a.points?a.area=Math.abs(new ol.Sphere(6378137).geodesicArea(a.points)/1e3/1e3):a.area=0,setTimeout(a.$apply.bind(a),0)}function f(){var a=i.getProperties();e(a)}function g(){var b=i.updateProperties({points:a.points,buffer:a.buffer,units:a.units});e(b)}var h=a.$on("$destroy",b),i=a.tool,j=_.throttle(function(){_.defer(f)},100);i.on(["propertieschanged","featurescreated"],j),a.unitsOpts=[{name:"mi",label:"miles"},{name:"km",label:"kilometers"},{name:"nm",label:"nautical miles"}];var k="nm";a.points=null,a.coordinates=null,a.buffer=0,a.units=null,a.area=0,a.labelUnit=c,a.pickUnit=d,a.changed=g,f(),a.units=k,a.changed()};return{restrict:"E",templateUrl:"ccri.area-definition/tools/polygon.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="polygon",a.map=i.getMap(),a.isDrawing=!1,a.activeFeature=null,a.bufferedFeature=null,a.emptyProperties={points:null,multiPoints:null,buffer:0,units:"nm"},a.properties=_.cloneDeep(a.emptyProperties),a.supportedUnits=["km","nm","mi"],a.lastPaintProperties={},a.cancelNextDeleteKeyUp=!1,a.on("destroy",a.destroy,a),a.spatialAnalysis=new h,a.polygonCollection=new ol.Collection([]),k.listen(),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),k.unlisten(),this._modifyInteraction&&(this.map&&this.map.removeInteraction(this._modifyInteraction),this._modifyInteraction.un("modifyend",this.onModifyEnd,this),this._modifyInteraction),this.polygonOverlay&&i.removeLayerOverlay(this.polygonOverlay),this.bufferOverlay&&i.removeLayerOverlay(this.bufferOverlay),this._draw&&(this.map&&this.map.removeInteraction(this._draw),this.isDrawing=!1,this._draw.un("drawstart",this.onDrawStart,this),this._draw.un("drawend",this.onDrawEnd,this)),this.map=null,this.spatialAnalysis&&this.spatialAnalysis.destroy(),this.spatialAnalysis=null,this.polygonCollection=this.polygonOverlaySource=this.bufferOverlaySource=null,this.polygonOverlay=this.bufferOverlay=null,this._modifyInteraction=this._draw=null,this.activeFeature=this.bufferedFeature=null,this.emptyProperties=this.properties=this.supportedUnits=this.lastPaintProperties=null},c.prototype.activate=function(a){if(this.bufferOverlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!1}),this.bufferOverlay=new ol.layer.Vector({source:this.bufferOverlaySource,style:g.features_buffered}),this.bufferOverlay.setProperties({name:"Polygon Tool: buffered"}),i.addLayerOverlay(this.bufferOverlay),this.polygonOverlaySource=new ol.source.Vector({features:this.polygonCollection,wrapX:!0}),this.polygonOverlay=new ol.layer.Vector({source:this.polygonOverlaySource,style:g.active}),this.polygonOverlay.setProperties({name:"Polygon Tool"}),i.addLayerOverlay(this.polygonOverlay),a){var b=a[0],c=b.getGeometry();if(!(c instanceof ol.geom.Polygon||c instanceof ol.geom.MultiPolygon||c instanceof ol.geom.Circle))return f.reject("wrong type");this.isMultiPolygon=c instanceof ol.geom.MultiPolygon;var d=b.getProperties(),e=d.toolProperties||{};this.isMultiPolygon?this.updateProperties({points:null,multiPoints:e.multiPoints?e.multiPoints:c.getCoordinates()},!1):this.updateProperties({points:e.points?e.points:c.getCoordinates()[0],multiPoints:null},!1),this.startModifying()}else this._draw=new ol.interaction.Draw({type:"Polygon",style:g.draw,freehandCondition:ol.events.condition.never}),this.map.addInteraction(this._draw),this.isDrawing=!0,this._draw.on("drawstart",this.onDrawStart,this),this._draw.on("drawend",this.onDrawEnd,this);return this.spatialAnalysis.activate()},c.prototype.onDrawStart=function(){if(this.drawInProgress=!0,this.dispatchEvent({type:"drawstart"}),this.activeFeature||this.bufferedFeature){var a=this.bufferedFeature||this.activeFeature;this.clearEverything(),this.sendFeature(a)}},c.prototype.onDrawEnd=function(a){this.drawInProgress=!1;var b=a.feature.getGeometry().clone();this.isMultiPolygon?this.updateProperties({points:null,multiPoints:b.getCoordinates()},!0):this.updateProperties({points:b.getCoordinates()[0],multiPoints:null},!0),this.startModifying()},c.prototype.handleMapClick=function(a){return this.isDrawing||k.isDown([46],!0)},c.prototype.onModifyEnd=function(a){var b=a.features.item(0),c=b.getGeometry();if(this.isMultiPolygon)var d={points:null,multiPoints:c.getCoordinates()};else var d={points:c.getCoordinates()[0],multiPoints:null};this.updateProperties(d,!0)},c.prototype.startModifying=function(){var a=this;this.stopModifying(),this._modifyInteraction=new ol.interaction.Modify({features:this.polygonOverlaySource.getFeaturesCollection(),style:g.draw,deleteCondition:function(b){return!(!ol.events.condition.click(b)||!k.isDown([46],!0))&&(a.cancelNextDeleteKeyUp=!0,!0)},wrapX:!0}),this._modifyInteraction.on("modifyend",this.onModifyEnd,this),this.map.addInteraction(this._modifyInteraction)},c.prototype.stopModifying=function(){this._modifyInteraction&&(this.map&&this.map.removeInteraction(this._modifyInteraction),this._modifyInteraction.un("modifyend",this.onModifyEnd))},c.prototype.sendFeature=function(a){this.dispatchEvent({type:"featurescreated",features:[a]})},c.prototype.clearEverything=function(){this.clearPolygon(),this.clearBuffer(),this.properties=_.cloneDeep(this.emptyProperties)},c.prototype.clearPolygon=function(){this.polygonOverlaySource.getFeaturesCollection().clear(),this.activeFeature=null},c.prototype.clearBuffer=function(){var a=this,b=this.bufferOverlaySource.getFeaturesCollection();b.forEach(function(b){a.bufferOverlaySource.removeFeature(b)}),this.bufferedFeature=null},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){var a;if(this.bufferedFeature)a=this.bufferedFeature;else{if(!this.activeFeature)return;a=this.activeFeature}if(this.isMultiPolygon){var b=[],c=a.getGeometry();return c.getCoordinates().forEach(function(a){b.push(a[0])}),b}return a.getGeometry().getCoordinates()[0]},c.prototype.updateProperties=function(b,c){var d=this;void 0===c&&(c=!1),b.units&&!~this.supportedUnits.indexOf(b.units)&&delete b.units,b.points&&delete b.multiPoints,b.buffer&&b.units&&b.units!==this.properties.units&&(b.buffer=a.convertUnits(b.buffer,this.properties.units,b.units));var e,g=a.FeatureGeneratorTool.changeProperties(this.properties,b);return g&&(e=this.repaint()),(c||e)&&f.when(e).then(function(){d.dispatchEvent({type:"propertieschanged"})}),this.getProperties()},c.prototype.repaint=function(){var b=this,c=_.cloneDeep(this.lastPaintProperties);this.lastPaintProperties={points:this.properties.points,multiPoints:this.properties.multiPoints,buffer:this.properties.buffer,units:this.properties.units};var d;if(this.isMultiPolygon)d=new ol.geom.MultiPolygon(this.properties.multiPoints,"XY");else{if(!this.properties.points||this.properties.points.length<3)return this.clearPolygon(),void this.clearBuffer();d=new ol.geom.Polygon([this.properties.points],"XY")}return this.activeFeature?this.activeFeature.setGeometry(d):(this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:d}),this.polygonCollection.push(this.activeFeature)),this.properties.buffer&&this.properties.units?(this.isMultiPolygon&&_.isEqual(c.multiPoints,this.properties.multiPoints)||!this.isMultiPolygon&&_.isEqual(c.points,this.properties.points))&&c.buffer===this.properties.buffer&&c.units===this.properties.units?void 0:(this.clearBuffer(),this.spatialAnalysis.buffer(this.activeFeature,a.convertUnits(this.properties.buffer,this.properties.units,"miles"),"miles").then(function(c){var d=a.GeneratedFeature.fromFeature(c,b.toolName,{});b.bufferedFeature=_.isArray(d)?d[0]:d,b.bufferOverlaySource.addFeature(b.bufferedFeature)})):void this.clearBuffer()},c.prototype.hasFeature=function(){return!!this.bufferedFeature||!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=[];return this.bufferedFeature?a=[this.bufferedFeature]:this.activeFeature&&(a=[this.activeFeature]),f.when(a)},c.prototype.handleKeyPress=function(a){var b=!1;switch(a.keyCode){case 46:this.cancelNextDeleteKeyUp&&(b=!0,this.cancelNextDeleteKeyUp=!1)}return b},c.prototype.clear=function(){return this.drawInProgress&&this._draw.finishDrawing(),this.polygonCollection.clear(),this.bufferOverlaySource.clear(),this.isMultiPolygon=null,this.activeFeature=null,this.bufferedFeature=null,this.properties=_.cloneDeep(this.emptyProperties),this.lastPaintProperties={},this.dispatchEvent({type:"propertieschanged"}),f.when()},c.prototype.finish=function(){this.spatialAnalysis.finish();var a=this.bufferedFeature||this.activeFeature;return this.dispatchEvent({type:"destroy"}),a?[a]:[]},c}(a.FeatureGeneratorTool);b.PolygonTool=e;var f,g,h,i,j,k,l;c.$inject=["$q","ccri.area-definition.colors","ccri.area-definition.spatialAnalysis","ol3Map","stealth.core.geo.ol3.overlays.Vector","stealth.core.utils.keyboard","ol3Styles"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.Polygon||(a.Polygon={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style","stealth.core.geo.ol3.interaction"]).factory("PolygonTool",CreateFeatures.Polygon.ToolService).directive("polygonControls",CreateFeatures.Polygon.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,k){return f=a,g=b,h=c,i=d,j=k,e}function d(){var a=function(a){function b(){f(),f=null,g.un(["propertieschanged","featurescreated"],h),g=a.tool=null,a.all=a.selected=null,a.capture=_.noop,a=null}function c(b){a.all=b.all,a.selected=b.selected,setTimeout(a.$apply.bind(a),0)}function d(){var a=g.getProperties();c(a)}function e(){g.autoFinish()}var f=a.$on("$destroy",b),g=a.tool;a.all=null,a.selected=null,a.capture=e,d();var h=_.throttle(d,100);g.on(["propertieschanged","featurescreated"],h)};return{restrict:"E",templateUrl:"ccri.area-definition/tools/polygonSelector.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="polygonSelector",a.map=h.getMap(),a.allFeatures=null,a.selectedFeature=null,a.emptyProperties={selected:null,all:[]},a.properties=_.cloneDeep(a.emptyProperties),a.on("destroy",a.destroy,a),a.allFeatures=[],a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.compositeLayer&&h.removeLayerOverlay(this.compositeLayer),this.selectedLayer&&h.removeLayerOverlay(this.selectedLayer),this.compositeSource=this.selectedSource=null,this.map=this.compositeLayer=this.selectedLayer=null,this.allFeatures=this.selectedFeature=null,this.emptyProperties=this.properties=null},c.prototype.activate=function(a){var b,c=this;if(this.compositeSource=new ol.source.Vector({features:this.allFeatures,wrapX:!1}),this.compositeLayer=new ol.layer.Vector({source:this.compositeSource,style:g.features_selectable}),this.compositeLayer.setProperties({name:"Polygon Selector Tool"}),this.selectedSource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!1}),this.selectedLayer=new ol.layer.Vector({source:this.selectedSource,style:g.features_selected}),this.compositeLayer.setProperties({name:"Polygon Selector Tool: active feature"}),h.addLayerOverlay(this.compositeLayer),h.addLayerOverlay(this.selectedLayer),a){var d=this.splitFeatures(a);(b=this.allFeatures).push.apply(b,d),this.compositeSource.addFeatures(d),this.updateProperties({all:d.map(function(a){return c.getInfo(a)})})}return f.resolve()},c.prototype.splitFeatures=function(a){var b=[];return a.forEach(function(a){if(a.getGeometry()instanceof ol.geom.MultiPolygon){var c=a.getProperties();delete c[a.getGeometryName()];var d=a.getGeometry().getPolygons();d.forEach(function(d){var e=_.clone(c);e[a.getGeometryName()]=d,b.push(new ol.Feature(e))})}else b.push(a)}),b},c.prototype.onFeatureSelected=function(a){this.updateProperties({selected:this.getInfo(a)},!0),this.selectedFeature&&(this.selectedSource.removeFeature(this.selectedFeature),this.allFeatures.push(this.selectedFeature),this.compositeSource.addFeature(this.selectedFeature)),this.selectedFeature=a,this.selectedSource.addFeature(a),this.allFeatures.splice(this.allFeatures.indexOf(this.selectedFeature),1),this.compositeSource.removeFeature(a)},c.prototype.autoFinish=function(){this.dispatchEvent({type:"autofinish"})},c.prototype.getInfo=function(a){var b=a.getProperties();return delete b[a.getGeometryName()],_.cloneDeep(b)},c.prototype.handleMapClick=function(a){var b,c=this;return this.map.forEachFeatureAtPixel(a.pixel,function(a){b=a},{layerFilter:function(a){return a===c.compositeLayer}}),b&&this.onFeatureSelected(b),!0},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.updateProperties=function(b,c){void 0===c&&(c=!1);a.FeatureGeneratorTool.changeProperties(this.properties,b);return c&&this.dispatchEvent({type:"propertieschanged"}),this.getProperties()},c.prototype.hasFeature=function(){return!!this.selectedFeature},c.prototype.getActiveFeatures=function(){var a=this.selectedFeature?[this.selectedFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.compositeSource.clear(),this.selectedSource.clear(),this.properties=_.cloneDeep(this.emptyProperties),this.selectedFeature=null,f.when()},c.prototype.finish=function(){var a=this.selectedFeature;return a?(this.dispatchEvent({type:"destroy"}),[a]):f.reject()},c}(a.FeatureGeneratorTool);b.PolygonSelectorTool=e;var f,g,h,i,j;c.$inject=["$q","ccri.area-definition.colors","ol3Map","stealth.core.geo.ol3.overlays.Vector","ol3Styles"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.PolygonSelector||(a.PolygonSelector={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("PolygonSelectorTool",CreateFeatures.PolygonSelector.ToolService).directive("polygonSelectorControls",CreateFeatures.PolygonSelector.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,l,m){return f=a,g=b,h=c,i=d,j=l,k=m,e}function d(){var a=function(a){function b(a){j.clear().then(function(){j.setGeodesic(a),j.startNewDrawing()})}function c(){i(),i=null,j.un(["propertieschanged","featurescreated"],l),j=a.tool=null,a.unitsOpts=a.toolParams=a.coordinates=null,a.labelUnit=a.changed=_.noop,a=null}function d(b){a.toolParams.center=_.clone(b.center),a.toolParams.radius=null==b.radius?0:b.radius,a.toolParams.units=b.units,a.coordinates=j.getCoordinates(),setTimeout(a.$apply.bind(a),0)}function e(){var a=j.getProperties();d(a)}function f(a){return a.label}function g(a){return a.name}function h(){if(a.toolParams.center instanceof Array){var b={radius:a.toolParams.radius,units:a.toolParams.units};a.toolParams.center&&(b.center=[a.toolParams.center[0],a.toolParams.center[1]]);var c=j.updateProperties(b);d(c)}}var i=a.$on("$destroy",c),j=a.tool;j.setGeodesic(a.geodesic!==!1),a.unitsOpts=[{name:"mi",label:"miles"},{name:"km",label:"kilometers"},{name:"nm",label:"nautical miles"}];var k="nm";a.toolParams={center:null,radius:null,units:null},a.coordinates=null,a.labelUnit=f,a.selectUnit=g,a.changed=h,a.changeMode=b,e(),a.toolParams.units=k,a.changed();var l=_.throttle(function(){_.defer(e)},100);j.on(["propertieschanged","featurescreated"],l)};return{restrict:"E",templateUrl:"ccri.area-definition/tools/radiusCircle.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="radiusCircle",a.map=i.getMap(),a.isDrawing=!1,a.activeFeature=null,a.emptyProperties={center:[],radius:null,units:null},a.properties=_.cloneDeep(a.emptyProperties),a.supportedUnits=["km","nm","mi"],a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.overlay&&i.removeLayerOverlay(this.overlay),this._draw&&(this.map&&this.map.removeInteraction(this._draw),this.isDrawing=!1,this._draw.un("drawstart",this.onDrawStart,this),this._draw.un("drawend",this.onDrawEnd,this)),this.overlaySource=null,this.map=this.overlay=null,this._draw=this.activeFeature=null,this.emptyProperties=this.properties=this.supportedUnits=this.projection=null},c.prototype.activate=function(a){if(this.projection=this.map.getView().getProjection(),this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource,style:g.active}),this.overlay.setProperties({name:"Circle Tool"}),i.addLayerOverlay(this.overlay),a){var b=a[0].getProperties().toolProperties;if(!(b.center&&b.radius&&b.units))return f.reject("Missing required parameters");this.updateProperties(b)}else this.startNewDrawing();return f.resolve()},c.prototype.onDrawStart=function(a){if(this.drawInProgress=!0,this.dispatchEvent({type:"drawstart"}),this.geodesic){var b=a.feature.getGeometry();this.initialClickPoint=b.getFirstCoordinate()}if(this.activeFeature){var c=this.activeFeature;this.clearDisplay(),this.clearProperties(),this.sendFeature(c)}},c.prototype.onDrawEnd=function(b){this.drawInProgress=!1;var c,d,e;if(this.geodesic){var f=b.feature.getGeometry();e=f,c=this.initialClickPoint,d=a.convertUnits(h.distanceVincenty([c,f.getFirstCoordinate()]),"meters",this.properties.units,this.projection),this.initialClickPoint=null}else{var f=b.feature.getGeometry();e=ol.geom.Polygon.fromCircle(f),c=f.getCenter(),d=a.convertUnits(f.getRadius(),"degrees",this.properties.units,this.projection)}this.updateProperties_({center:c,radius:d},!0),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:e}),this.overlaySource.addFeature(this.activeFeature),this.dispatchEvent({type:"propertieschanged"})},c.prototype.handleMapClick=function(a){return!!this.isDrawing},c.prototype.sendFeature=function(a){var b=a?[a]:[];this.dispatchEvent({type:"featurescreated",features:b})},c.prototype.clearDisplay=function(){this.activeFeature&&(this.overlaySource.removeFeature(this.activeFeature),this.activeFeature=null)},c.prototype.clearProperties=function(){var a=this.properties.units;this.properties=_.cloneDeep(this.emptyProperties),this.properties.units=a},c.prototype.makeGeodesicCircle=function(a,b){return b=b||h.distanceVincenty(a),ol.geom.Polygon.circular(h.sphere,a[0],b)},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()[0]},c.prototype.getGeodesicCircle=function(){var a=this;return new ol.interaction.Draw({type:"Circle",style:g.draw,geometryFunction:function(b,c){return c||(c=new ol.geom.Polygon(null)),c.setCoordinates(a.makeGeodesicCircle(b).getCoordinates()),c}})},c.prototype.getCircle=function(){return new ol.interaction.Draw({type:"Circle",style:g.draw})},c.prototype.startNewDrawing=function(){this._draw&&this.map.removeInteraction(this._draw),this._draw=this.geodesic?this.getGeodesicCircle():this.getCircle(),this.map.addInteraction(this._draw),this.isDrawing=!0,this._draw.on("drawstart",this.onDrawStart,this),this._draw.on("drawend",this.onDrawEnd,this)},c.prototype.updateProperties=function(a,b){void 0===b&&(b=!1);var c=this.updateProperties_(a,b);return c&&this.dispatchEvent({type:"propertieschanged"}),this.getProperties()},c.prototype.updateProperties_=function(b,c){void 0===c&&(c=!1),b.units&&!~this.supportedUnits.indexOf(b.units)&&delete b.units,this.properties.units&&b.radius&&b.units&&b.units!==this.properties.units&&(b.radius=a.convertUnits(b.radius,this.properties.units,b.units));var d=a.FeatureGeneratorTool.changeProperties(this.properties,b);return d&&!c&&this.repaint(),d},c.prototype.repaint=function(){if(this.properties.center&&this.properties.center.length>=2&&!isNaN(this.properties.center[0])&&!isNaN(this.properties.center[1])&&this.properties.radius&&this.properties.units){var b=a.convertUnits(this.properties.radius,this.properties.units,"degrees",this.projection),c=a.convertUnits(this.properties.radius,this.properties.units,"meters",this.projection);this.clearDisplay();var d=this.geodesic?this.makeGeodesicCircle([this.properties.center],c):ol.geom.Polygon.fromCircle(new ol.geom.Circle(this.properties.center,b));this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:d}),this.overlaySource.addFeature(this.activeFeature)}},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.drawInProgress&&this._draw.finishDrawing(),this.clearDisplay(),this.clearProperties(),this.dispatchEvent({type:"propertieschanged"}),f.when()},c.prototype.finish=function(){var a=this.activeFeature;return this.dispatchEvent({type:"destroy"}),a?[a]:[]},c}(a.FeatureGeneratorTool);b.RadiusCircleTool=e;var f,g,h,i,j,k;c.$inject=["$q","ccri.area-definition.colors","ol3Geodetics","ol3Map","stealth.core.geo.ol3.overlays.Vector","ol3Styles"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.RadiusCircle||(a.RadiusCircle={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("RadiusCircleTool",CreateFeatures.RadiusCircle.ToolService).directive("radiusCircleControls",CreateFeatures.RadiusCircle.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c,d,l,m){return f=a,g=b,h=c,i=d,j=l,k=m,e}function d(){var a=function(a,b,c,d){function e(){n(),n=null,o.un(["propertieschanged","featurescreated"],r),o.un("featuresent",l),o.map.removeOverlay(q),p=q=null,o.map.un("singleclick",i),o.map=null,o=a.tool=null,a.toolParams=a.coordinates=null,a.changed=_.noop,a=null}function f(b){b&&(a.toolParams.coordinates=null==b.coordinates?0:b.coordinates,a.toolParams.text=null==b.text?"":b.text,a.toolParams.textAreaSelected=b.textAreaSelected),a.coordinates=o.getCoordinates(),a.selectorActive=o.selectorActive,setTimeout(a.$apply.bind(a),0),j()}function g(){var a=o.getProperties();f(a)}function h(){if(a){var b;a.toolParams.coordinates instanceof Array?(b=o.updateProperties({coordinates:a.toolParams.coordinates,text:a.toolParams.text,textAreaSelected:a.toolParams.textAreaSelected}),f(b)):b=o.updateProperties({text:a.toolParams.text,textAreaSelected:a.toolParams.textAreaSelected})}}function i(){o.map.addOverlay(q),k(p)(a),j(),p[0].children[0].focus()}function j(){q.setPosition([a.toolParams.coordinates[0],a.toolParams.coordinates[1]])}function l(){o.map.removeOverlay(q),a.toolParams=_.cloneDeep(m)}var m={coordinates:null,text:"",textAreaSelected:!1},n=a.$on("$destroy",e),o=a.tool;a.toolParams=_.cloneDeep(m),a.coordinates=null,a.selectorActive=!1;var p=angular.element('\n          <div class="map-textbox-container">\n            <textarea \n                id="textInput" \n                ng-change="changed()"\n                ng-focus="focusTextArea()"\n                ng-blur="blurTextArea()" \n                ng-model="toolParams.text">\n            </textarea>\n          </div>\n        '),q=new ol.Overlay({element:p[0]});g(),a.toolParams.coordinates&&i(),o.map.on("singleclick",i);var r=_.throttle(function(){_.defer(g)},100);o.on(["propertieschanged","featurescreated"],r),o.on("featuresent",l),a.changed=h,a.focusTextArea=function(){a&&a.toolParams&&(a.toolParams.textAreaSelected=!0),h()},a.blurTextArea=function(){a&&a.toolParams&&(a.toolParams.textAreaSelected=!1),h()}};return{restrict:"E",templateUrl:"ccri.area-definition/tools/textVector.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.map=i.getMap(),a.toolName="textVector",a.selectorActive=!1,a.isDrawing=!1,a.activeFeature=null,a.emptyProperties={coordinates:null,text:"",textAreaSelected:!1},a.properties=_.cloneDeep(a.emptyProperties),a.destroyed=!1,a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.destroyed=!0,this.overlay&&i.removeLayerOverlay(this.overlay),this._draw&&(this.map&&this.map&&this.map.removeInteraction(this._draw),this.isDrawing=!1,this._draw.un("drawstart",this.onDrawStart,this)),this.overlaySource&&this.overlaySource.clear(!0),this.overlaySource=this.overlay=this._draw=null,this.activeFeature=this.emptyProperties=this.properties=null},c.prototype.activate=function(a){if(this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource}),this.overlay.setProperties({name:"Text Tool"}),i.addLayerOverlay(this.overlay),a){var b=a[0].getProperties().toolProperties;if(!b.coordinates)return f.reject("Missing required parameters");this.updateProperties(b)}else this._draw=new ol.interaction.Draw({type:"Point",style:g.blank}),this.map.addInteraction(this._draw),this.isDrawing=!0,this._draw.on("drawstart",this.onDrawStart,this),this.setTextCursor(!0);return this.properties.text||(this.selectorActive=!0),f.resolve()},c.prototype.onDrawStart=function(b){this.dispatchEvent({type:"drawstart"}),this.activeFeature&&this.sendAndResetText();var c=b.feature.getGeometry().clone(),d=c.getCoordinates();this.updateProperties_({coordinates:d},!0),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:c}),this.activeFeature.setStyle(g.blank),this.setTextCursor(!1),this.overlaySource.addFeature(this.activeFeature),this.selectorActive=!1,this.dispatchEvent({type:"propertieschanged"})},c.prototype.handleMapClick=function(a){return!!this.isDrawing},c.prototype.sendFeature=function(a){a?(a.setStyle(g.text(a.getProperties().toolProperties.text)),this.dispatchEvent({type:"featurescreated",features:[a]})):this.dispatchEvent({type:"featurescreated",features:[]})},c.prototype.clearActiveFeature=function(){this.activeFeature&&(this.overlaySource.removeFeature(this.activeFeature),this.activeFeature=null)},c.prototype.sendAndResetText=function(){if(this.properties.text&&this.properties.text.length>0){var a=this.activeFeature;this.clearActiveFeature(),this.sendFeature(a),this.dispatchEvent({type:"featuresent"}),this.clearProperties()}else this.clearProperties()},c.prototype.clearProperties=function(){this.properties=_.cloneDeep(this.emptyProperties)},c.prototype.setTextCursor=function(a){void 0===a&&(a=!0);var b=document.getElementsByClassName("ol3Map")[0];b.style.cursor=a?"text":"initial"},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()},c.prototype.updateProperties=function(a,b){void 0===b&&(b=!1);var c=this.updateProperties_(a,b);return c&&this.dispatchEvent({type:"propertieschanged"}),this.getProperties()},c.prototype.updateProperties_=function(b,c){void 0===c&&(c=!1);var d=a.FeatureGeneratorTool.changeProperties(this.properties,b);return d&&!c&&this.repaint(),d},c.prototype.repaint=function(){this.properties.coordinates&&(this.clearActiveFeature(),this.activeFeature=new a.GeneratedFeature(this.toolName,this.properties,{geometry:new ol.geom.Point(this.properties.coordinates)}),this.activeFeature.setStyle(g.blank),this.overlaySource.addFeature(this.activeFeature))},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.sendAndResetText(),this.clearActiveFeature(),this.dispatchEvent({type:"propertieschanged"}),f.when()},c.prototype.finish=function(){this.setTextCursor(!1),this.activeFeature&&this.activeFeature.setStyle(g.text(this.properties.text));var a=this.properties.text?this.activeFeature:null;return this.dispatchEvent({type:"destroy"}),a?[a]:[]},c}(a.FeatureGeneratorTool);b.TextVectorTool=e;var f,g,h,i,j,k;c.$inject=["$q","ccri.area-definition.colors","stealth.core.geo.ol3.overlays.Vector","ol3Map","ol3Styles","$compile"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.TextVector||(a.TextVector={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map","stealth.core.geo.ol3.overlays","stealth.core.geo.ol3.style"]).factory("TextVectorTool",CreateFeatures.TextVector.ToolService).directive("textVectorControls",CreateFeatures.TextVector.ControlsDirective);var CreateFeatures;!function(a){var b;!function(b){function c(a,b,c){return f=a,g=b,h=c,e}function d(){var a=function(a){function b(){g(),g=null,h.un(["propertieschanged","featurescreated"],f),h.un("cleared",e),h=a.tool=null,a.coordinates=null,a.capture=_.noop,a=null}function c(){a.isCaptured||(h.capture(),a.isCaptured=!0)}function d(b){a.coordinates=h.getCoordinates()}function e(b){a.isCaptured=!1,f()}function f(){var a=h.getProperties();d(a)}var g=a.$on("$destroy",b),h=a.tool;a.coordinates=null,a.isCaptured=!1,a.capture=c,f(),h.on(["propertieschanged","featurescreated"],f),h.on("cleared",e),c()};return{restrict:"E",templateUrl:"ccri.area-definition/tools/wholeEarth.tpl.html",link:a}}var e=function(b){function c(){var a=b.call(this)||this;return a.toolName="wholeEarth",a.map=h.getMap(),a.properties={},a.on("destroy",a.destroy,a),a}return __extends(c,b),c.prototype.destroy=function(){this.un("destroy",this.destroy,this),this.overlay&&h.removeLayerOverlay(this.overlay),this.map=this.overlay=null,this.activeFeature=this.properties=null},c.prototype.activate=function(a){return a?f.reject("not supported"):(this.overlaySource=new ol.source.Vector({features:new ol.Collection([]),wrapX:!0}),this.overlay=new ol.layer.Vector({source:this.overlaySource,style:g.active}),this.overlay.setProperties({name:"Whole Earth Tool"}),h.addLayerOverlay(this.overlay),f.resolve())},c.prototype.getProperties=function(){return _.clone(this.properties)},c.prototype.getCoordinates=function(){if(this.activeFeature)return this.activeFeature.getGeometry().getCoordinates()[0];
},c.prototype.updateProperties=function(a){return this.getProperties()},c.prototype.capture=function(){var b=[-180,-90,180,90];this.activeFeature=new a.GeneratedFeature("coordRect",{north:b[3],south:b[1],east:b[2],west:b[0]},{geometry:ol.geom.Polygon.fromExtent(b)}),this.overlaySource.addFeature(this.activeFeature),this.dispatchEvent({type:"propertieschanged"})},c.prototype.hasFeature=function(){return!!this.activeFeature},c.prototype.getActiveFeatures=function(){var a=this.activeFeature?[this.activeFeature]:[];return f.when(a)},c.prototype.clear=function(){return this.overlaySource.clear(),this.activeFeature=null,this.dispatchEvent("cleared"),f.when()},c.prototype.finish=function(){var a=this.activeFeature?[this.activeFeature]:[];return this.dispatchEvent({type:"destroy"}),a},c}(a.FeatureGeneratorTool);b.WholeEarthTool=e;var f,g,h;c.$inject=["$q","ccri.area-definition.colors","ol3Map"],b.ToolService=c,d.$inject=[],b.ControlsDirective=d}(b=a.WholeEarth||(a.WholeEarth={}))}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition",["stealth.core.geo.ol3.map"]).factory("WholeEarthTool",CreateFeatures.WholeEarth.ToolService).directive("wholeEarthControls",CreateFeatures.WholeEarth.ControlsDirective),angular.module("ccri.area-definition.utils",[]).namespace();var AreaDefUtils;!function(a){function b(a){return c=a,f}var c,d=0,e={},f=function(a){function b(a){var b=a.feature.getGeometry().getCoordinates();f.resolve(b)}var f=c.defer(),g=++d;f.promise._selectPointId=g,e[g]=f;var h=new ol.source.Vector({wrapX:!1}),i=new ol.layer.Vector({source:h});a.addLayer(i);var j=new ol.interaction.Draw({source:h,type:"Point",style:CreateFeatures.ColorLibrary.draw});return a.addInteraction(j),j.on("drawend",b),f.promise.finally(function(){g in e&&delete e[g],a.removeLayer(i),a.removeInteraction(j),j.un("drawend",b),h=i=j=null,a=f=f.promise=null}),f.promise};f.cancel=function(a){var b=a._selectPointId,c=e[b];c&&(delete e[b],c.reject())},b.$inject=["$q"],a.selectPointFactory=b}(AreaDefUtils||(AreaDefUtils={})),angular.module("ccri.area-definition.utils",[]).factory("selectPoint",AreaDefUtils.selectPointFactory);var CreateFeatures;!function(a){function b(){return c}var c=function(){function a(){this.normalExtent=[-180,-90,180,90],this.rightExtent=[180,-90,720,90],this.leftExtent=[-720,-90,-180,90],this.turfNormalExtentPoly=turf.polygon(ol.geom.Polygon.fromExtent(this.normalExtent).getCoordinates()),this.turfLeftExtentPoly=turf.polygon(ol.geom.Polygon.fromExtent(this.leftExtent).getCoordinates()),this.turfRightExtentPoly=turf.polygon(ol.geom.Polygon.fromExtent(this.rightExtent).getCoordinates()),this.splitFeatures=[]}return a.prototype.destroy=function(){this.collection&&this.collection.un("add",this.onCollectionAdd,this),this.splitFeatures=null,this.normalExtent=this.rightExtent=this.leftExtent=null,this.turfNormalExtentPoly=this.turfLeftExtentPoly=this.turfRightExtentPoly=null},a.prototype.isOutside=function(a){return!ol.extent.containsExtent(this.normalExtent,a.getExtent())},a.prototype.isOutsideFully=function(a){return this.isOutside(a)&&!ol.extent.intersects(this.normalExtent,a.getExtent())},a.prototype.watchCollection=function(a){var b=this;this.collection&&this.collection.un("add",this.onCollectionAdd,this),this.collection=a,this.collection.on("add",this.onCollectionAdd,this),this.collection.forEach(function(a){b.processNew(a,b.collection)})},a.prototype.onCollectionAdd=function(a){this.processNew(a.element,a.target)},a.prototype.processNew=function(a,b){this.wrap(a);var c=this.split(a);c&&(b.remove(a),b.extend(c))},a.prototype.wrap=function(a){var b=a.getGeometry();this.isOutsideFully(b)&&this.normalizeGeometry(b)},a.prototype.split=function(a){var b=a.getGeometry();if(this.isOutside(b)&&!this.isOutsideFully(b)){var c;if(c=b instanceof ol.geom.MultiPolygon||b instanceof ol.geom.Polygon?this.splitPolyGeometry(b):this.splitLineGeometry(b),b instanceof ol.geom.Polygon||b instanceof ol.geom.MultiLineString){var d=[];return c.forEach(function(b){var c=a.clone();c.setGeometry(b),d.push(c)}),this.splitFeatures.push(_.clone(d)),d}return b instanceof ol.geom.MultiPolygon?[new ol.Feature(new ol.geom.MultiPolygon(c.map(function(a){return a.getCoordinates()})))]:void 0}},a.prototype.normalizeGeometry=function(a){var b=ol.extent.getCenter(a.getExtent())[0],c=b>0?(b+180)%360-180:(b-180)%360+180,d=c-b;return a.translate(d,0),a.setCoordinates(this.fixCoordFloats(a.getCoordinates())),a},a.prototype.fixCoordFloats=function(a){for(var b=a[0],c=0,d=b.length;c<d;c++)this.closeEnough(180,b[c][0])&&(b[c][0]=180),this.closeEnough(180,b[c][1])&&(b[c][1]=180),this.closeEnough(-180,b[c][0])&&(b[c][0]=-180),this.closeEnough(-180,b[c][1])&&(b[c][1]=-180);return a},a.prototype.closeEnough=function(a,b){return Math.abs(a-b)<1e-6},a.prototype.splitPolyGeometry=function(a){var b=this,c=[];a instanceof ol.geom.MultiPolygon?c.push.apply(c,a.getPolygons()):c.push(a);var d,e,f=[];return _.forEach(c,function(c){(a instanceof ol.geom.Polygon||ol.geom.MultiPolygon)&&(d=turf.polygon(c.getCoordinates())),e=b.processIntersectResult(turf.intersect(b.turfNormalExtentPoly,d)),e&&f.push.apply(f,e),e=b.processIntersectResult(turf.intersect(b.turfLeftExtentPoly,d)),e&&f.push.apply(f,e),e=b.processIntersectResult(turf.intersect(b.turfRightExtentPoly,d)),e&&f.push.apply(f,e)}),f},a.prototype.splitLineGeometry=function(a){var b=this,c=[];a instanceof ol.geom.MultiLineString?c.push.apply(c,a.getLineStrings()):c.push(a);var d=[];return _.forEach(c,function(a){var c=a.getCoordinates(),e="",f="",g=[],h=c[0];c.forEach(function(a){if(ol.extent.containsCoordinate(b.leftExtent,a))f="left";else if(ol.extent.containsCoordinate(b.rightExtent,a))f="right";else{if(!ol.extent.containsCoordinate(b.normalExtent,a))return;f="normal"}if(f===e)g.push(a);else{var c="";if("left"===f&&"normal"===e&&(c="rightToLeft"),"normal"===f&&"left"===e&&(c="leftToRight"),"normal"===f&&"right"===e&&(c="rightToLeft"),"right"===f&&"normal"===e&&(c="leftToRight"),g.length>0){var i=a[1]-h[1],j=a[0]-h[0],k=i/j,l="leftToRight"===c?180:-180,m=k*(l-a[0])+a[1];"leftToRight"===c?(g.push([180,m]),d.push(new ol.geom.LineString(g)),g=[],g.push([180,m])):"rightToLeft"===c&&(g.push([-180,m]),d.push(new ol.geom.LineString(g)),g=[],g.push([-180,m]))}g.push(a)}h=a,e=f}),d.push(new ol.geom.LineString(g))}),d},a.prototype.processIntersectResult=function(a){var b=this;if(a){var c=[];if("MultiPolygon"===a.geometry.type)a.geometry.coordinates.forEach(function(a){c.push(new ol.geom.Polygon(a))});else if("Polygon"===a.geometry.type)c.push(new ol.geom.Polygon(a.geometry.coordinates));else{if("MultiLineString"!==a.geometry.type)return;a.geometry.coordinates.forEach(function(a){c.push(new ol.geom.MultiLineString(a))})}return c.map(function(a){return b.normalizeGeometry(a)})}},a.prototype.isASplit=function(a){return this.findSplit(a)!==-1},a.prototype.findSplit=function(a){var b,c,d,e;for(b=0,d=this.splitFeatures.length;b<d;b++)for(c=0,e=this.splitFeatures[b].length;c<e;c++)if(a===this.splitFeatures[b][c])return b;return-1},a.prototype.getSplitParts=function(a){var b=this.findSplit(a);if(b==-1)throw"feature is not a split";return _.clone(this.splitFeatures[b])},a}();a.WrapHelper=c,b.$inject=[],a.WrapHelperService=b}(CreateFeatures||(CreateFeatures={})),angular.module("ccri.area-definition").factory("WrapHelper",CreateFeatures.WrapHelperService),angular.module("ccri.area-definition").factory("spatialAnalysis",["$q","stealth.core.geo.ol3.format.GeoJson",function(a,b){function c(){this.engine,this.callsToBuffer}function d(){var b=this;return b.engine=g(),b.callsToBuffer=0,a.when(b.engine)}function e(){var b=this;return b.callsToBuffer=0,a.when(b.engine.close())}function f(b,c,d){var e=this,f=++e.callsToBuffer;return h(b).then(function(b){var c=e.callsToBuffer;return c===f?a.when(b):e.engine.batch("clearJobs").then(function(){return b})}).then(function(a){var b=i(a);return e.engine.batch.buffer(b.map(function(a){return{geoJson:a,distance:c,units:d}}))}).then(function(b){var c=e.callsToBuffer;return c===f?a.when(b):a.reject(b)}).then(function(b){return b.reduce(function(a,b){return a.then(function(a){return a?e.engine.union([b,a]):b})},a.when())}).then(j).then(function(b){return f!=e.callsToBuffer?a.reject("new buffer started"):a.resolve(b)},function(b){return a.reject(b)})}function g(){return cw({init:function(){importScripts("vendor/bower/turf/turf.min.js")},buffer:function(a){var b=a.geoJson,c=a.distance,d=a.units;return c=null===c?100:c,isNaN(c)&&(c=0),~["miles"].indexOf(d)||(d="miles"),turf.buffer(b,c,d).features[0]},splitMultiPolygon:function(a){return a},union:function(a){if(a)return turf.union(a[0],a[1])}},4)}function h(b){return a.when(l.writeFeatureObject(b))}function i(a){switch(a&&a.type||null){case"FeatureCollection":return a.features=a.features.reduce(function(a,b){return a.concat(i(b))},[]),a;case"Feature":return a.geometry?i(a.geometry).map(function(b){return{geometry:b,properties:JSON.parse(JSON.stringify(a.properties)),type:"Feature"}}):a;case"MultiPoint":return a.coordinates.map(function(a){return{coordinates:a,type:"Point"}});case"MultiPolygon":return a.coordinates.map(function(a){return{coordinates:a,type:"Polygon"}});case"MultiLineString":return a.coordinates.map(function(a){return{coordinates:a,type:"LineString"}});case"GeometryCollection":return a.geometries.map(i).reduce(function(a,b){return a.concat(b)},[]);case"Point":case"Polygon":case"LineString":return[a]}}function j(b){return a(function(a,c){switch(b.type){case"FeatureCollection":a(l.readFeatures(b));break;case"Feature":a(l.readFeature(b));break;default:c("unknown geoJSON type")}})}function k(){var a=this;this.engine.close(),_.each(["batch","batchTransfer","__batchcb__","__batchtcb__"],function(b){_.forIn(a.engine[b],function(c,d){a.engine[b][d]=null})}),_.forIn(this.engine,function(b,c){a.engine[c]=null}),this.engine=a=null,this.activate=this.finish=this.buffer=this.destroy=null}var l=new b;return c.prototype.activate=d,c.prototype.finish=e,c.prototype.buffer=f,c.prototype.destroy=k,c}]),angular.module("ccri.area-definition",[]).directive("drawtoolSelector",["$controller","$timeout",function(a,b){return{restrict:"E",scope:{featureCreator:"=",onlyShowToolIconOnButton:"=?",onClickFn:"=?",firstToolIdx:"@?"},templateUrl:"ccri.area-definition/tools/common/drawtool_selector.tpl.html",link:function(c){function d(){e(),e=null,g(),g=null,f=c.tools=null,c.requestedTool=null,c.featureCreator=null,c=null}var e=c.$on("$destroy",d);a("ccri.area-definition.ToolSelectorCtrl",{$scope:c}),c.onlyShowToolIconOnButton=!!c.onlyShowToolIconOnButton,c.onClickFn=c.onClickFn||function(){},c.firstToolIdx=+c.firstToolIdx||1;var f=[{name:null,label:"Select shape to edit",iconClass:"fa-mouse-pointer"},{name:"coordRect",label:"Draw Rectangle",iconClass:"fa-square"},{name:"polygon",label:"Draw Polygon",iconClass:"fa-pencil"},{name:"radiusCircle",label:"Draw Circle",iconClass:"fa-circle"},{name:"mapPoint",label:"Add Point",iconClass:"fa-map-pin"},{name:"line",label:"Draw line",iconClass:"fa-arrows-h"},{name:"bufferFeature",label:"Existing Feature",iconClass:"fa-crosshairs"},{name:"mapView",label:"Map View Extent",iconClass:"fa-arrows-alt"},{name:"wholeEarth",label:"Whole Earth",iconClass:"fa-globe"},{name:"textVector",label:"Add Text",iconClass:"fa-font"}];c.featureCreator&&c.featureCreator.supportedTools?c.tools=f.filter(function(a,b){return 0===b||c.featureCreator.supportedTools.indexOf(a.name)!==-1}):c.tools=f,c.labelFn=function(a){return'<i class="fa fa-fw buf-md-mr '+a.iconClass+'"></i>'+a.label},c.buttonTextFn=function(a){return c.onlyShowToolIconOnButton?'<i class="fa fa-lg fa-pencil"></i>':c.labelFn(a)},c.onToolChange=function(){_.isUndefined(c.requestedTool)||(c.pickTool(c.requestedTool.name),c.$emit("toolChanged",c.requestedTool))},c.buttonClassFn=function(){if(c.onlyShowToolIconOnButton){var a="btn action-btn bar-btn bar-color2 bar-btn-toggle draw-tools-dropdown-button";return c.featureCreator.handleMapClicks?a+" bar-btn-toggle-on":a}return""},c.featureCreator.getActiveToolName()?(c.requestedTool=_.find(f,function(a){return a.name===c.featureCreator.getActiveToolName()})||f[1],c.selectedTool=c.requestedTool):c.requestedTool=f[1],b(function(){null===c.selectedTool&&(c.requestedTool=f[c.firstToolIdx]),c.pickTool(c.requestedTool.name)});var g=c.$watch("selectedTool",function(a){if(_.isNull(a))c.requestedTool=f[0],c.$emit("toolChanged",c.requestedTool);else{var b=_.find(f,{name:a.name});_.isUndefined(b)||b===c.requestedTool||(c.requestedTool=b)}})}}}]),angular.module("ccri.area-definition.templates",[]).run(["$templateCache",function(a){a.put("ccri.area-definition/controls/eraseButton.tpl.html",'<a ng-click="hasFeatures() && erase()" ng-disabled="!hasFeatures()">\n  <i class="fa" ng-class="iconClass"></i>\n</a>\n'),a.put("ccri.area-definition/controls/saveButton.tpl.html",'<span uib-dropdown dropdown-append-to-body="true">\n  <a uib-dropdown-toggle ng-class="toggleClass" ng-disabled="!hasFeatures()">\n    <i class="fa" ng-class="iconClass"></i>\n    <span class="caret"></span>\n  </a>\n  <ul uib-dropdown-menu ng-class="menuClass" role="menu">\n    <li ng-click="save(\'json\')"><a href="">GeoJSON</a></li>\n  </ul>\n</span>\n'),a.put("ccri.area-definition/controls/selectButton.tpl.html",'<a ng-click="closeTools()" ng-disabled="shouldDisable()">\n  <i class="fa" ng-class="iconClass"></i>\n</a>\n'),a.put("ccri.area-definition/controls/uploadButton.tpl.html",'<a ng-click="upload()">\n  <i class="fa" ng-class="iconClass"></i>\n</a>\n'),a.put("ccri.area-definition/tools/bufferFeature.tpl.html",'<ng-form>\n    <ccri-area-definition-more-details-display>\n        <p class="pt-lg">DIRECTIONS:\n            Select layer from dropdown list,\n            select feature on map,\n            then enter feature buffer distance below.\n            Press ESC to exit a drawing and DELETE to delete a shape.\n        </p>\n    </ccri-area-definition-more-details-display>\n\n    <div class="flex-row flex-align-items-center buf-xs-mb">\n        <div class="field-label">&nbsp;</div>\n        <div class="flex-1">\n            <ccri-angular-utils-select ng-model="toolParams.selectedLayer"\n                                       ng-change="chooseLayer()"\n                                       from-list="layers"\n                                       label-fn="labelLayer"\n                                       placeholder="Select a Feature Layer"\n                                       empty-message="None available"\n                                       hide-tooltip="true"\n            ></ccri-angular-utils-select>\n        </div>\n        <div class="flex-static" ng-class="{\'ng-hide\': !layerLoading}">\n            <i class="fa fa-spinner fa-spin fa-lg fa-fw"></i>\n        </div>\n    </div>\n    <div class="flex-row flex-align-items-center buf-lg-mb">\n        <div class="field-label">\n            <span class="buf-lg-pr">\n                <span ng-class="{\'ng-hide\': !bufferLoading}"><i class="fa fa-spinner fa-spin fa-lg fa-fw"></i></span>\n                <span>Buffer:</span>\n            </span>\n        </div>\n        <input ccri-angular-utils-number="{commas: true,\n                            decimalPlaces: 4,\n                            upDown: true,\n                            upDownMin: 0}"\n               class="buf-xs-mr"\n               type="number"\n               style="flex: 1 0 85px"\n               ng-change="updateDistance()"\n               ng-model="toolParams.distance"\n               ng-model-options="{\n                   \'updateOn\': \'default blur\',\n                   \'debounce\': {\n                       \'default\': 200,\n                       \'blur\': 0\n                   }\n               }"\n               required>\n        <div class="field-input" style="width:100px">\n            <ccri-angular-utils-select ng-model="toolParams.selectedUnit"\n                                       ng-change="chooseUnit()"\n                                       from-list="units"\n                                       placeholder="Select units"\n                                       empty-message="None available"\n                                       hide-tooltip="true"\n            ></ccri-angular-utils-select>\n        </div>\n    </div>\n\n    <ccri-area-definition-more-details-display>\n        <div class="flex-row flex-align-items-center justify-end mt-sm mb1"\n             ng-class="{\'ng-hide\': !selectedFeatureName}">\n            <div class="flex-1">&nbsp;</div>\n            <span>Selected: {{ selectedFeatureName }}</span>\n        </div>\n    </ccri-area-definition-more-details-display>\n\n    <ccri-area-definition-more-details-display>\n        <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n    </ccri-area-definition-more-details-display>\n</ng-form>\n'),a.put("ccri.area-definition/tools/common/coordinateBox.tpl.html",'<div style="margin: 0 0.5em; overflow: hidden;">\n  Area Coordinates<span ng-show="coordinates.length && !isMultiPolygon"> ({{coordinates.length}})</span><span ng-show="coordinates.length && isMultiPolygon"> (multiple shapes)</span>:\n\n  <ccri-angular-utils-clipboard-copy\n    data-clipboard-text="{{coordinates}}" class="copy-btn pull-right clickable"\n    uib-tooltip="Copy to clipboard" tooltip-class="nowrap" tooltip-append-to-body="true"\n    tooltip-placement="top" tooltip-animation="true"\n    tooltip-popup-delay="300" tooltip-trigger="mouseenter"\n    ng-show="coordinates">\n        <i class="fa fa-clipboard"></i>\n    </ccri-angular-utils-clipboard-copy>\n</div>\n\n<div class="well fade-out" style="word-break: break-all">\n\n\n  <div style="line-height: 1.3; height: 3.9em;">{{coordinates}}</div>\n</div>\n'),a.put("ccri.area-definition/tools/common/drawtool_selector.tpl.html",'<div>\n    <span class="field-input">\n        <ccri-angular-utils-select ng-model="requestedTool"\n                                   ng-change="onToolChange()"\n                                   from-list="tools"\n                                   label-fn="labelFn"\n                                   placeholder="Select a Drawing Method"\n                                   empty-message="None available"\n                                   button-text-fn="buttonTextFn"\n                                   static-size="true"\n                                   static-dropdown-tooltip="true"\n                                   tooltip-placement="bottom-right"\n                                   hide-caret="onlyShowToolIconOnButton"\n                                   button-class-fn="buttonClassFn"\n                                   on-click-fn="onClickFn"\n        ></ccri-angular-utils-select>\n    </span>\n</div>\n'),a.put("ccri.area-definition/tools/common/more-details-display.tpl.html",'<div uib-collapse="!areaDefDetailsDisplayCtrl.isOpen">\n    <div ng-transclude></div>\n</div>\n'),a.put("ccri.area-definition/tools/common/more-details-toggle.tpl.html",'<div>\n    <a href="#"\n       class="toggle-btn"\n       ng-click="areaDefDetailsToggleCtrl.toggleOpen()">\n       <i class="fa fa-fw fa-cog"></i>\n       <span ng-if="!areaDefDetailsToggleCtrl.isOpen"\n             class="font-sm">SHOW OPTIONS</span>\n       <span ng-if="areaDefDetailsToggleCtrl.isOpen"\n             class="font-sm">HIDE OPTIONS</span>\n    </a>\n</div>\n'),a.put("ccri.area-definition/tools/coordRect.tpl.html",'<ccri-area-definition-more-details-display>\n    <p class="pt-lg pl-sm">DIRECTIONS:\n        Single-click to start drawing rectangle.\n        Extend the shape, then click to end.\n        Make edits in the text fields below.\n        Press ESC to exit a drawing in progress and DELETE to delete a shape.\n    </p>\n    <div class="extent-form mb1">\n        <div style="text-align:center;">\n            N\n            <input type="number" step="any"\n                   ccri-area-definition-decimal-input\n                   ng-model="toolParams.north" ng-change="changed()">\n        </div>\n        <div class="flex-row flex-justify-content-space-between" style="padding:2px 8px;">\n            <div>\n                W\n                <input type="number" step="any"\n                       ccri-area-definition-decimal-input\n                       ng-model="toolParams.west" ng-change="changed()">\n            </div>\n            <div>\n                E\n                <input type="number" step="any"\n                       ccri-area-definition-decimal-input\n                       ng-model="toolParams.east" ng-change="changed()">\n            </div>\n        </div>\n        <div style="text-align:center;">\n            S\n            <input type="number" step="any"\n                   ccri-area-definition-decimal-input\n                   ng-model="toolParams.south" ng-change="changed()">\n        </div>\n        <div style="padding:5px 0px 0px 6px;">Area Size: {{area | numberTrim:2}} km²</div>\n    </div>\n\n    <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n</ccri-area-definition-more-details-display>\n'),a.put("ccri.area-definition/tools/line.tpl.html",'<ng-form name="form">\n    <ccri-area-definition-more-details-display>\n        <p class="pt-lg">DIRECTIONS:\n            Single-click to add points. Double-click to end. Press ESC to exit a drawing in progress and DELETE to delete a shape.\n        </p>\n        <div style="flex: 0 2 100%" ng-if="showGeodesicControls">\n            <span class="clickable nowrap" ng-click="changeMode(!tool.isGeodesic())">\n                <i class="fa" ng-class="(tool.isGeodesic()) ? \'fa-check-square-o\' : \'fa-square-o\'"></i>\n                Geodesic\n            </span>\n        </div>\n        <div style="flex: 0 2 100%">\n            <span class="clickable nowrap" ng-click="setArrows(isArrows = !isArrows)">\n                <i class="fa" ng-class="(tool.isArrows()) ? \'fa-check-square-o\' : \'fa-square-o\'"></i>\n                Show arrowhead\n            </span>\n        </div>\n        <div style="padding:10px 0px 0px 0px;">\n            <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n        </div>\n    </ccri-area-definition-more-details-display>\n</ng-form>\n'),a.put("ccri.area-definition/tools/mapPoint.tpl.html",'<ng-form name="form">\n    <ccri-area-definition-more-details-display>\n        <p class="pt-lg">DIRECTIONS:\n            Click to add a point. Press ESC to cancel and DELETE to remove the current point.\n        </p>\n        <div class="flex-row flex-align-items-center buf-xs-mb">\n            <span class="field-label buf-lg-pr">Location:</span>\n            <input name="point" class="error-outline-dirty" style="width:100%"\n                   placeholder="Enter lat, long" ccri-geocoder-coordinate-input\n                   ng-model="toolParams.coordinates" required ng-change="changed()">\n        </div>\n    </ccri-area-definition-more-details-display>\n</ng-form>\n'),a.put("ccri.area-definition/tools/mapView.tpl.html",'<ccri-area-definition-more-details-display>\n    <p class="pt-lg">DIRECTIONS:\n        Selects current extents of map in the browser window.  Press ESC to exit a drawing and DELETE to delete a shape.\n        <span ng-class="{\'ng-hide\' : !isCaptured}">CLICK below to update map extents to current window.</span>\n        <span ng-class="{\'ng-hide\' : isCaptured}">CLICK below to capture current window.</span>\n    </p>\n</ccri-area-definition-more-details-display>\n\n<div class="capture-button flex-row flex-justify-content-center mb1">\n    <a class="link-btn clickable pl-tny" ng-click="capture()">\n        <i class="fa fa-lg fa-camera"></i>\n        <span ng-class="{\'ng-hide\' : !isCaptured}">Re-</span>Capture Map Extent\n    </a>\n</div>\n\n<ccri-area-definition-more-details-display>\n    <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n</ccri-area-definition-more-details-display>\n'),a.put("ccri.area-definition/tools/polygon.tpl.html",'<ng-form name="form">\n    <ccri-area-definition-more-details-display>\n        <p class="pt-lg">DIRECTIONS:\n            Click to draw a polygon on the map.\n            Double-click to finish drawing.\n            Click and drag to modify.\n            DELETE+click to erase a vertex.\n            Press ESC to exit a drawing in progress and DELETE to delete a shape.\n        </p>\n        <div style="margin:5px 0px 5px 6px;">Area Size: {{area | numberTrim:2}} km²</div>\n        <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n    </ccri-area-definition-more-details-display>\n</ng-form>\n'),a.put("ccri.area-definition/tools/polygonSelector.tpl.html",'<b>Single polygon mode</b><br>\nPlease choose a polygon.\nPress ESC to exit a drawing in progress and DELETE to delete a shape.\n<br>\n<button class="btn btn-default btn-sm" ng-click="capture()">Select</button>\n'),a.put("ccri.area-definition/tools/radiusCircle.tpl.html",'<ng-form name="form">\n    <ccri-area-definition-more-details-display>\n\n        <p class="pt-lg">DIRECTIONS:\n            Single-click to define a center.\n            Extend the radius, then click to end.\n            Make edits in the text fields below.\n            Press ESC to exit a drawing in progress and DELETE to delete a shape.\n        </p>\n        <div style="flex: 0 2 100%" ng-if="showGeodesicControls">\n            <span class="clickable nowrap" ng-click="changeMode(false)">\n                <i class="fa" ng-class="(!tool.isGeodesic())\n? \'fa-dot-circle-o\' : \'fa-circle-o\'"></i>\n                Circle\n            </span>\n            &nbsp;\n            <span class="clickable nowrap" ng-click="changeMode(true)">\n                <i class="fa" ng-class="(tool.isGeodesic())\n? \'fa-dot-circle-o\' : \'fa-circle-o\'"></i>\n                Geodesic\n            </span>\n        </div>\n        <div class="flex-row flex-align-items-center buf-xs-mb">\n            <span class="field-label buf-lg-pr">Center point:</span>\n            <input name="center" class="error-outline-dirty" style="width:100%"\n                   placeholder="Enter lat, long" ccri-geocoder-coordinate-input\n                   ng-model="toolParams.center" required ng-change="changed()">\n        </div>\n        <div class="flex-row flex-align-items-center buf-md-mb">\n            <span class="field-label buf-lg-pr">Radius:</span>\n            <input ccri-angular-utils-number="{commas: true,\n                                decimalPlaces: 4,\n                                upDown: true,\n                                upDownMin: 0}"\n                   name="radius" type="number" class="flex-1 buf-xs-mr"\n                   ng-model="toolParams.radius" required ng-change="changed()">\n            <div style="width:100px">\n                <ccri-angular-utils-select ng-model="toolParams.units"\n                                        ng-change="changed()"\n                                        from-list="unitsOpts"\n                                        label-fn="labelUnit"\n                                        select-fn="selectUnit"\n                                        placeholder="Select units"\n                                        empty-message="None available"\n                                        hide-tooltip="true"\n                ></ccri-angular-utils-select>\n            </div>\n        </div>\n\n        <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n    </ccri-area-definition-more-details-display>\n</ng-form>\n'),a.put("ccri.area-definition/tools/textVector.tpl.html",'<ng-form>\n<ccri-area-definition-more-details-display>\n    <p class="pt-lg pl-sm">DIRECTIONS:\n        Single-click to set coordinates of text annotation.\n        Make edits in the text fields below.\n        Press ESC to exit an annotation in progress and DELETE to delete it.\n    </p>\n    <div class="flex-row flex-align-items-center buf-xs-mb">\n        <span class="field-label buf-lg-pr">Coordinates:</span>\n        <input class="error-outline-dirty" placeholder="Enter lat, long"\n            ccri-geocoder-coordinate-input width="100%"\n            ng-model="toolParams.coordinates" required ng-change="changed()">\n    </div>\n</ccri-area-definition-more-details-display>\n<div class="flex-row flex-align-items-center buf-xs-mb">\n        <span class="field-label buf-lg-pr">Text Value:</span>\n    <textarea ng-focus="focusTextArea()" ng-blur="blurTextArea()" ng-disabled="selectorActive" \n            placeholder="{{selectorActive ? \'Select point on map\' : \'Enter text here\'}}"\n            step="any" rows="3" ng-model="toolParams.text" ng-change="changed()"></textarea>\n</div>\n</ng-form>'),a.put("ccri.area-definition/tools/wholeEarth.tpl.html",'<ccri-area-definition-more-details-display>\n    <p class="pt-lg">DIRECTIONS:\n        Selects entire earth. Press ESC to exit a drawing and DELETE to delete a shape.\n        <span ng-class="{\'ng-hide\' : isCaptured}">CLICK below to capture.</span>\n   </p>\n</ccri-area-definition-more-details-display>\n\n<div class="capture-button mb1">\n    <div class="flex-row flex-justify-content-center">\n        <a class="link-btn clickable pl-tny"\n           ng-click="capture()" ng-class="{\'ng-hide\': isCaptured}">\n            <i class="fa fa-lg fa-camera"></i> Select Whole Earth\n        </a>\n        <span class="pl-tny" ng-class="{\'ng-hide\': !isCaptured}">\n          <i class="fa fa-lg fa-check"></i> Whole Earth Selected\n        </span>\n    </div>\n    <div class="flex-row flex-justify-content-center">\n        <p style="padding-top: 4px; margin-bottom: 0px">\n            Not recommended for extremely high-volume data.\n        </p>\n    </div>\n</div>\n\n<ccri-area-definition-more-details-display>\n    <ccri-area-definition-coordinate-box coordinates="coordinates"></ccri-area-definition-coordinate-box>\n</ccri-area-definition-more-details-display>\n')}]);